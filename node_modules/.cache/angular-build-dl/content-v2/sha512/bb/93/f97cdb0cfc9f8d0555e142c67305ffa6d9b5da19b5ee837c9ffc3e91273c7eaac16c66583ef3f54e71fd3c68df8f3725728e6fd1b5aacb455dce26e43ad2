(function () {
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  (window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~appointments-appointments-module~bookmarks-bookmarks-module~centers-centers-module~contact-c~886963fb"], {
    /***/
    "Cx2V":
    /*!************************************************!*\
      !*** ./src/app/shared/classes/appointments.ts ***!
      \************************************************/

    /*! exports provided: ApiResponse, AgendaResponse, AgendaRequest, AgendaAvailabilityRequest, Agenda, TimeSlot, AgendaAvailabilityResponse, AppointmentsRecordRequest, AppointmentsRecordResponse, BookAppointmentRequest, BookAppointmentResponse, AppointmentConfirmation, AppointmentDeleteConfirmation, AppointmentDetail, Appointment, TeladocUser, TeladocCredentialsResponse, TeladocTimeSlot, TeladocAvailability, AgendaAvailability, TeladocAvailabilityResponse, TeladocBookAppointmentRequest, TeladocCredentials, TeladocBookAppointmentResponse, TeladocStartVideocallResponse */

    /***/
    function Cx2V(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ApiResponse", function () {
        return ApiResponse;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AgendaResponse", function () {
        return AgendaResponse;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AgendaRequest", function () {
        return AgendaRequest;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AgendaAvailabilityRequest", function () {
        return AgendaAvailabilityRequest;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Agenda", function () {
        return Agenda;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TimeSlot", function () {
        return TimeSlot;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AgendaAvailabilityResponse", function () {
        return AgendaAvailabilityResponse;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AppointmentsRecordRequest", function () {
        return AppointmentsRecordRequest;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AppointmentsRecordResponse", function () {
        return AppointmentsRecordResponse;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BookAppointmentRequest", function () {
        return BookAppointmentRequest;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BookAppointmentResponse", function () {
        return BookAppointmentResponse;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AppointmentConfirmation", function () {
        return AppointmentConfirmation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AppointmentDeleteConfirmation", function () {
        return AppointmentDeleteConfirmation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AppointmentDetail", function () {
        return AppointmentDetail;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Appointment", function () {
        return Appointment;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TeladocUser", function () {
        return TeladocUser;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TeladocCredentialsResponse", function () {
        return TeladocCredentialsResponse;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TeladocTimeSlot", function () {
        return TeladocTimeSlot;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TeladocAvailability", function () {
        return TeladocAvailability;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AgendaAvailability", function () {
        return AgendaAvailability;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TeladocAvailabilityResponse", function () {
        return TeladocAvailabilityResponse;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TeladocBookAppointmentRequest", function () {
        return TeladocBookAppointmentRequest;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TeladocCredentials", function () {
        return TeladocCredentials;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TeladocBookAppointmentResponse", function () {
        return TeladocBookAppointmentResponse;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TeladocStartVideocallResponse", function () {
        return TeladocStartVideocallResponse;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");

      var ApiResponse = function ApiResponse() {
        _classCallCheck(this, ApiResponse);
      };

      var AgendaResponse = function AgendaResponse() {
        _classCallCheck(this, AgendaResponse);
      };

      AgendaResponse = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], AgendaResponse);

      var AgendaRequest = function AgendaRequest(id_agenda, codi_servei) {
        _classCallCheck(this, AgendaRequest);

        this.id_agenda = id_agenda;
        this.codi_servei = codi_servei;
      };

      var AgendaAvailabilityRequest = function AgendaAvailabilityRequest(id_agenda, data_inici, data_fi) {
        _classCallCheck(this, AgendaAvailabilityRequest);

        this.id_agenda = id_agenda;
        this.data_inici = data_inici;
        this.data_fi = data_fi;
      };

      var Agenda = function Agenda() {
        _classCallCheck(this, Agenda);
      };

      Agenda.ctorParameters = function () {
        return [];
      };

      Agenda = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], Agenda);

      var TimeSlot = function TimeSlot() {
        _classCallCheck(this, TimeSlot);
      };

      TimeSlot.ctorParameters = function () {
        return [];
      };

      TimeSlot = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], TimeSlot);

      var AgendaAvailabilityResponse = function AgendaAvailabilityResponse() {
        _classCallCheck(this, AgendaAvailabilityResponse);
      };

      AgendaAvailabilityResponse = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], AgendaAvailabilityResponse);

      var AppointmentsRecordRequest = function AppointmentsRecordRequest() {
        _classCallCheck(this, AppointmentsRecordRequest);
      };

      AppointmentsRecordRequest.ctorParameters = function () {
        return [];
      };

      AppointmentsRecordRequest = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], AppointmentsRecordRequest);

      var AppointmentsRecordResponse = function AppointmentsRecordResponse() {
        _classCallCheck(this, AppointmentsRecordResponse);
      };

      AppointmentsRecordResponse.ctorParameters = function () {
        return [];
      };

      AppointmentsRecordResponse = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], AppointmentsRecordResponse);

      var BookAppointmentRequest = function BookAppointmentRequest(mutua, data_cita, id_agenda, codi_servei, enviar_mail) {
        _classCallCheck(this, BookAppointmentRequest);

        this.mutua = mutua;
        this.data_cita = data_cita;
        this.id_agenda = id_agenda;
        this.codi_servei = codi_servei;
        this.enviar_mail = enviar_mail;
      };

      var BookAppointmentResponse = function BookAppointmentResponse() {
        _classCallCheck(this, BookAppointmentResponse);
      };

      BookAppointmentResponse.ctorParameters = function () {
        return [];
      };

      BookAppointmentResponse = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], BookAppointmentResponse);
      ;

      var AppointmentConfirmation = function AppointmentConfirmation(guardar_bbdd, enviar_mail, dades) {
        _classCallCheck(this, AppointmentConfirmation);

        this.guardar_bbdd = guardar_bbdd;
        this.enviar_mail = enviar_mail;
        this.dades = dades;
      };

      var AppointmentDeleteConfirmation = function AppointmentDeleteConfirmation() {
        _classCallCheck(this, AppointmentDeleteConfirmation);
      };

      var AppointmentDetail = function AppointmentDetail(agenda_type, email, pacient_nom, pacient_cognom, id_cita, data, hora, estat, metge_nom, centre_nom, centre_adreca, centre_cp, centre_poblacio, centre_telefon) {
        _classCallCheck(this, AppointmentDetail);

        this.agenda_type = agenda_type;
        this.email = email;
        this.pacient_nom = pacient_nom;
        this.pacient_cognom = pacient_cognom;
        this.id_cita = id_cita;
        this.data = data;
        this.hora = hora;
        this.estat = estat;
        this.metge_nom = metge_nom;
        this.centre_nom = centre_nom;
        this.centre_adreca = centre_adreca;
        this.centre_cp = centre_cp;
        this.centre_poblacio = centre_poblacio;
        this.centre_telefon = centre_telefon;
      };

      var Appointment = function Appointment() {
        _classCallCheck(this, Appointment);
      };

      Appointment.ctorParameters = function () {
        return [];
      };

      Appointment = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], Appointment);

      var TeladocUser = function TeladocUser() {
        _classCallCheck(this, TeladocUser);
      };

      var TeladocCredentialsResponse = function TeladocCredentialsResponse() {
        _classCallCheck(this, TeladocCredentialsResponse);
      };

      var TeladocTimeSlot = function TeladocTimeSlot() {
        _classCallCheck(this, TeladocTimeSlot);
      };

      TeladocTimeSlot.ctorParameters = function () {
        return [];
      };

      TeladocTimeSlot = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], TeladocTimeSlot);

      var TeladocAvailability = function TeladocAvailability() {
        _classCallCheck(this, TeladocAvailability);
      };

      TeladocAvailability.ctorParameters = function () {
        return [];
      };

      TeladocAvailability = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], TeladocAvailability);

      var AgendaAvailability = function AgendaAvailability() {
        _classCallCheck(this, AgendaAvailability);
      };

      AgendaAvailability.ctorParameters = function () {
        return [];
      };

      AgendaAvailability = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], AgendaAvailability);

      var TeladocAvailabilityResponse = function TeladocAvailabilityResponse() {
        _classCallCheck(this, TeladocAvailabilityResponse);
      };

      TeladocAvailabilityResponse.ctorParameters = function () {
        return [];
      };

      TeladocAvailabilityResponse = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], TeladocAvailabilityResponse);

      var TeladocBookAppointmentRequest = function TeladocBookAppointmentRequest() {
        _classCallCheck(this, TeladocBookAppointmentRequest);
      };

      TeladocBookAppointmentRequest.ctorParameters = function () {
        return [];
      };

      TeladocBookAppointmentRequest = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], TeladocBookAppointmentRequest);

      var TeladocCredentials = function TeladocCredentials() {
        _classCallCheck(this, TeladocCredentials);
      };

      TeladocCredentials = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], TeladocCredentials);

      var TeladocBookAppointmentResponse = function TeladocBookAppointmentResponse() {
        _classCallCheck(this, TeladocBookAppointmentResponse);
      };

      TeladocBookAppointmentResponse = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], TeladocBookAppointmentResponse);

      var TeladocStartVideocallResponse = function TeladocStartVideocallResponse() {
        _classCallCheck(this, TeladocStartVideocallResponse);
      };

      TeladocStartVideocallResponse = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], TeladocStartVideocallResponse);
      /***/
    },

    /***/
    "Oz3r":
    /*!*************************************************!*\
      !*** ./src/app/services/appointment.service.ts ***!
      \*************************************************/

    /*! exports provided: AppointmentService */

    /***/
    function Oz3r(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AppointmentService", function () {
        return AppointmentService;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common/http */
      "tk/3");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _config_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../config/constants */
      "5Pvz");
      /* harmony import */


      var _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ../shared/classes/appointments */
      "Cx2V");
      /* harmony import */


      var _api_endpoints_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ./api-endpoints.service */
      "7R0Y");
      /* harmony import */


      var _http_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ./http.service */
      "N+K7");
      /* harmony import */


      var _authentication_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ./authentication.service */
      "ej43");
      /* harmony import */


      var _ionic_angular__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @ionic/angular */
      "TEn/");

      var AppointmentService = /*#__PURE__*/function () {
        function AppointmentService(http, api, constants, authService, alertController) {
          _classCallCheck(this, AppointmentService);

          this.http = http;
          this.api = api;
          this.constants = constants;
          this.authService = authService;
          this.alertController = alertController;
        }

        _createClass(AppointmentService, [{
          key: "getAgenda",
          value: function getAgenda() {
            var _this = this;

            var params = new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["AgendaRequest"](this.id_agenda, this.codi_servei);
            var endpoint = this.api.getEndpoint(this.constants.get_info_agenda);
            return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
              if (res.status != 200) _this.throwError(res);
              return res.data.map(function (item) {
                var agenda = new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["Agenda"]();
                return Object.assign(agenda, item);
              });
            }));
          }
        }, {
          key: "showAlert",
          value: function showAlert(message) {
            return this.alertController.create({
              header: 'Info',
              message: message,
              buttons: ['OK']
            });
          }
        }, {
          key: "getAgendaAvailability",
          value: function getAgendaAvailability(params) {
            var _this2 = this;

            //console.log("params: ", params);
            var endpoint = this.api.getEndpoint(this.constants.get_agenda_availability);
            return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
              if (res.status !== 200 && res.status !== 204) _this2.throwError(res);
              return res.data.map(function (item) {
                var agenda = new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["AgendaAvailability"]();
                return Object.assign(agenda, item);
              });
            }));
          }
        }, {
          key: "getTeladocUser",
          value: function getTeladocUser() {
            var _this3 = this;

            var endpoint = this.api.getEndpoint('getUserTeladoc');
            var params = {
              username: this.authService.user.id_usuari_mgc,
              app: this.constants.get_teladoc_app_id,
              entorn: this.constants.get_teladoc_env
            };
            return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
              return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this3, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        console.log("getTeladocUser: ", res);

                        if (!(res.status != 200)) {
                          _context.next = 3;
                          break;
                        }

                        return _context.abrupt("return", this.throwError(res.message));

                      case 3:
                        this.teladocUser = res.data;
                        return _context.abrupt("return", res.data);

                      case 5:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, this);
              }));
            }));
          }
        }, {
          key: "getTeladocUser2",
          value: function getTeladocUser2() {
            var _this4 = this;

            var endpoint = this.api.getEndpoint('getUserTeladoc');
            var params = {
              username: this.authService.user.id_usuari_mgc,
              app: this.constants.get_teladoc_app_id,
              entorn: this.constants.get_teladoc_env
            };
            return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
              console.log("getTeladocUser: ", res);
              if (res.status != 200) return _this4.throwError(res);
              _this4.teladocUser = res.data;
              return res.data;
            })).toPromise();
          }
        }, {
          key: "getTeladocToken",
          value: function getTeladocToken(params) {
            var _this5 = this;

            var token;
            var endpoint = this.api.getEndpoint('teladoc/users/login');
            return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
              //console.log('TeladocToken: ', res);
              if (res.status != "ok") _this5.throwError("Teladoc login failed");
              var credentials = new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["TeladocCredentials"]();
              return Object.assign(credentials, res.data);
            }));
          }
        }, {
          key: "getTeladocAvailability",
          value: function getTeladocAvailability(params) {
            var _this6 = this;

            //console.log("params: ", params);
            var endpoint = this.api.getEndpoint('teladoc/telehealth/videocalls/availability');
            return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
              if (res.status !== "ok") _this6.throwError(res);
              return res.data.availability.map(function (item) {
                var date = new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["TeladocAvailability"]();
                return Object.assign(date, item);
              });
            }));
          }
        }, {
          key: "getTeladocAppointmentInfo",
          value: function getTeladocAppointmentInfo(id, project_id) {
            var _this7 = this;

            var params = {
              project_id: project_id,
              token: this.teladocCredentials.client_token
            };
            var endpoint = this.api.getEndpoint('teladoc/telehealth/videocalls/info/' + id);
            return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
              if (res.status !== "ok") _this7.throwError(res);
              return res;
            }));
          }
        }, {
          key: "getAppointmentsRecord",
          value: function getAppointmentsRecord(params) {
            var _this8 = this;

            //console.log("params: ", params);
            var endpoint = this.api.getEndpoint(this.constants.get_appointments_record);
            return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
              if (res.status !== 200) _this8.throwError(res);
              return res.data.map(function (item) {
                var appointment = new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["Appointment"]();
                return Object.assign(appointment, item);
              });
            }));
          }
        }, {
          key: "saveAppointment",
          value: function saveAppointment(data, isOnline, type, place, indications, staff_id) {
            var _this9 = this;

            data["place"] = place;
            data["indications"] = indications;
            data["date"] = data.data;
            data["staff_id"] = staff_id;
            data["online"] = isOnline;
            data["agenda_type"] = type; // Saves appointment in Doole
            //console.log("saveAppointment data: ", data);

            this.authService.post('mgc/agenda', {
              data: data
            }).subscribe(function (data) {
              return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this9, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));
            }, function (error) {
              // Called when error
              console.log('error: ', error);
              throw new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpErrorResponse"](error);
            });
          }
        }, {
          key: "deleteAppointment",
          value: function deleteAppointment(mutua, appointmentId, appointmentType, agenda) {
            var _this10 = this;

            var params = {
              "mutua": mutua,
              "id_cita": appointmentId,
              "enviar_mail": this.constants.send_mail
            };
            var endpoint = this.api.getEndpoint(this.constants.delete_appointment);
            return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
              console.log("RES: ", res);
              if (res.status !== 200) _this10.throwError(res);
              return res;
            }));
          }
        }, {
          key: "getAppointmentInfo",
          value: function getAppointmentInfo(mutua, id_cita) {
            var _this11 = this;

            var params = {
              mutua: mutua,
              id_cita: id_cita
            };
            var endpoint = this.api.getEndpoint(this.constants.info_appointment);
            return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
              if (res.status !== 200) _this11.throwError(res);
              return res.data;
            }));
          }
        }, {
          key: "deleteAppointmentDoole",
          value: function deleteAppointmentDoole(appointmentId) {
            //Delele appointment in Doole
            var params = {
              agenda: appointmentId
            };
            return this.authService.post('user/agenda/delete', params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (data) {
              return data;
            }, function (error) {
              // Called when error
              return error;
            }));
          }
        }, {
          key: "bookAppointment",
          value: function bookAppointment(mutua, date) {
            var _this12 = this;

            var isOnline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var type = arguments.length > 3 ? arguments[3] : undefined;
            var place = arguments.length > 4 ? arguments[4] : undefined;
            var indications = arguments.length > 5 ? arguments[5] : undefined;
            var staff_id = arguments.length > 6 ? arguments[6] : undefined;
            var params = new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["BookAppointmentRequest"](mutua, date, this.id_agenda, this.codi_servei, this.constants.send_mail); //console.log("bookAppointment params:", params);

            var endpoint = this.api.getEndpoint(this.constants.make_appointment);
            return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
              if (res.status !== 200) _this12.throwError(res);

              _this12.saveAppointment(res.data.dades, isOnline, type, place, indications, staff_id);

              return new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["AppointmentConfirmation"](res.data.guardar_bbdd, res.data.enviar_mail, res.data.dades);
            }));
          }
        }, {
          key: "bookMetgeTutorAppointment",
          value: function bookMetgeTutorAppointment(mutua, date) {
            var _this13 = this;

            var isOnline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var type = arguments.length > 3 ? arguments[3] : undefined;
            var place = arguments.length > 4 ? arguments[4] : undefined;
            var indications = arguments.length > 5 ? arguments[5] : undefined;
            var staff_id = arguments.length > 6 ? arguments[6] : undefined;
            var params = new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["BookAppointmentRequest"](mutua, date, this.id_agenda, this.codi_servei, this.constants.send_mail); //console.log("bookAppointment params:", params);

            var endpoint = this.api.getEndpoint(this.constants.make_appointment);
            return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
              if (res.status !== 200) _this13.throwError(res);

              _this13.saveAppointment(res.data.dades, isOnline, type, place, indications, staff_id);

              return new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["AppointmentConfirmation"](res.data.guardar_bbdd, res.data.enviar_mail, res.data.dades);
            }));
          }
        }, {
          key: "bookTeladocAppointment",
          value: function bookTeladocAppointment(params, type, place, indications, staff_id) {
            var _this14 = this;

            //console.log("teladocBookAppointment params:", params);
            var endpoint = this.api.getEndpoint('teladoc/telehealth/videocalls/create/' + this.teladocCredentials.client_token);
            return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
              return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this14, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                var data;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        if (res.status != 'ok') this.throwError("Failed while creating videocall with Teladoc");
                        data = {
                          data: res.data.date.replace(/-/g, ""),
                          hora: res.data.time.replace(/:/g, ""),
                          id_cita: res.data.id,
                          metge_nom: "Consulta online",
                          centre_nom: "",
                          centre_adreca: "",
                          centre_cp: "",
                          centre_poblacio: "",
                          centre_telefon: ""
                        };
                        this.saveAppointment(data, true, type, place, indications, staff_id);
                        return _context3.abrupt("return", res.data);

                      case 4:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3, this);
              }));
            }));
          }
        }, {
          key: "getVideocallCredentials",
          value: function getVideocallCredentials(params) {
            var _this15 = this;

            //console.log("teladocBookAppointment params:", params);
            var endpoint = this.api.getEndpoint('teladoc/telehealth/videocalls/create/' + this.teladocCredentials.client_token);
            return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
              if (res.status != 'ok') _this15.throwError("Failed while creating videocall with Teladoc");
              var data = res.data;
              var postData = {
                data: {
                  data: data.date,
                  hora: data.time,
                  id_cita: data.id,
                  metge_nom: "",
                  centre_nom: "",
                  centre_adreca: "",
                  centre_cp: "",
                  centre_poblacio: "",
                  centre_telefon: ""
                }
              }; // save apoointment in backoffice

              _this15.authService.post('mgc/agenda', postData).subscribe(function (data) {
                return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this15, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4);
                }));
              }, function (error) {
                // Called when error
                console.log('error: ', error);
                throw new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpErrorResponse"](error);
              });

              return res.data;
            }));
          }
        }, {
          key: "startTeladocVideocall",
          value: function startTeladocVideocall(id, project_id) {
            var params = {
              id: id,
              project_id: project_id
            }; //console.log("teladocBookAppointment params:", params);

            var endpoint = this.api.getEndpoint('teladoc/telehealth/videocalls/start/' + this.teladocCredentials.client_token);
            return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
              //if (res.status != 'ok')
              //this.throwError("Failed while creating videocall with Teladoc");
              return res;
            }));
          }
        }, {
          key: "deleteAppointmentTeladoc",
          value: function deleteAppointmentTeladoc(appointmentId, project_id) {
            var _this16 = this;

            var params = {
              id: appointmentId,
              project_id: project_id
            };
            console.log('deleteAppointmentTeladoc params: ', params); //console.log("teladocBookAppointment params:", params);

            var endpoint = this.api.getEndpoint('teladoc/telehealth/videocalls/cancel/' + this.teladocCredentials.client_token);
            return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
              console.log("deleteAppointmentTeladoc Response: ", res);
              if (res.status != 'ok') _this16.throwError(res.data);
              return res.data;
            }));
          }
        }, {
          key: "throwError",
          value: function throwError(error) {
            if (error instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpErrorResponse"]) throw new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpErrorResponse"](error);else throw new Error(error);
          }
        }, {
          key: "get",
          value: function get(endpt) {
            var endpoint = this.api.getDooleEndpoint(endpt);
            return this.http.get(endpoint).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
              return res;
            }));
          }
        }, {
          key: "post",
          value: function post(endpt, items) {
            var endpoint = this.api.getDooleEndpoint(endpt);
            return this.http.post(endpoint, items).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
              return res;
            }));
          }
        }]);

        return AppointmentService;
      }();

      AppointmentService.ctorParameters = function () {
        return [{
          type: _http_service__WEBPACK_IMPORTED_MODULE_7__["HttpService"]
        }, {
          type: _api_endpoints_service__WEBPACK_IMPORTED_MODULE_6__["ApiEndpointsService"]
        }, {
          type: _config_constants__WEBPACK_IMPORTED_MODULE_4__["Constants"]
        }, {
          type: _authentication_service__WEBPACK_IMPORTED_MODULE_8__["AuthenticationService"]
        }, {
          type: _ionic_angular__WEBPACK_IMPORTED_MODULE_9__["AlertController"]
        }];
      };

      AppointmentService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"])({
        providedIn: 'root'
      })], AppointmentService);
      /***/
    }
  }]);
})();
//# sourceMappingURL=default~appointments-appointments-module~bookmarks-bookmarks-module~centers-centers-module~contact-c~886963fb-es5.js.map
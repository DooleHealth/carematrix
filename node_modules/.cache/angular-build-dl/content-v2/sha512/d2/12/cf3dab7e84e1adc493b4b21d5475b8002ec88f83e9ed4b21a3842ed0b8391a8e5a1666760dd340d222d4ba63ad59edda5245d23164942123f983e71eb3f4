(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~appointments-appointments-module~bookmarks-bookmarks-module~centers-centers-module~contact-c~886963fb"],{

/***/ "Cx2V":
/*!************************************************!*\
  !*** ./src/app/shared/classes/appointments.ts ***!
  \************************************************/
/*! exports provided: ApiResponse, AgendaResponse, AgendaRequest, AgendaAvailabilityRequest, Agenda, TimeSlot, AgendaAvailabilityResponse, AppointmentsRecordRequest, AppointmentsRecordResponse, BookAppointmentRequest, BookAppointmentResponse, AppointmentConfirmation, AppointmentDeleteConfirmation, AppointmentDetail, Appointment, TeladocUser, TeladocCredentialsResponse, TeladocTimeSlot, TeladocAvailability, AgendaAvailability, TeladocAvailabilityResponse, TeladocBookAppointmentRequest, TeladocCredentials, TeladocBookAppointmentResponse, TeladocStartVideocallResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApiResponse", function() { return ApiResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AgendaResponse", function() { return AgendaResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AgendaRequest", function() { return AgendaRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AgendaAvailabilityRequest", function() { return AgendaAvailabilityRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Agenda", function() { return Agenda; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeSlot", function() { return TimeSlot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AgendaAvailabilityResponse", function() { return AgendaAvailabilityResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppointmentsRecordRequest", function() { return AppointmentsRecordRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppointmentsRecordResponse", function() { return AppointmentsRecordResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BookAppointmentRequest", function() { return BookAppointmentRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BookAppointmentResponse", function() { return BookAppointmentResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppointmentConfirmation", function() { return AppointmentConfirmation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppointmentDeleteConfirmation", function() { return AppointmentDeleteConfirmation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppointmentDetail", function() { return AppointmentDetail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Appointment", function() { return Appointment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TeladocUser", function() { return TeladocUser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TeladocCredentialsResponse", function() { return TeladocCredentialsResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TeladocTimeSlot", function() { return TeladocTimeSlot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TeladocAvailability", function() { return TeladocAvailability; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AgendaAvailability", function() { return AgendaAvailability; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TeladocAvailabilityResponse", function() { return TeladocAvailabilityResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TeladocBookAppointmentRequest", function() { return TeladocBookAppointmentRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TeladocCredentials", function() { return TeladocCredentials; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TeladocBookAppointmentResponse", function() { return TeladocBookAppointmentResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TeladocStartVideocallResponse", function() { return TeladocStartVideocallResponse; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");


class ApiResponse {
}
let AgendaResponse = class AgendaResponse {
};
AgendaResponse = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
], AgendaResponse);

class AgendaRequest {
    constructor(id_agenda, codi_servei) {
        this.id_agenda = id_agenda;
        this.codi_servei = codi_servei;
    }
    ;
}
class AgendaAvailabilityRequest {
    constructor(id_agenda, data_inici, data_fi) {
        this.id_agenda = id_agenda;
        this.data_inici = data_inici;
        this.data_fi = data_fi;
    }
    ;
}
let Agenda = class Agenda {
    constructor() { }
    ;
};
Agenda.ctorParameters = () => [];
Agenda = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
], Agenda);

let TimeSlot = class TimeSlot {
    constructor() { }
    ;
};
TimeSlot.ctorParameters = () => [];
TimeSlot = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
], TimeSlot);

let AgendaAvailabilityResponse = class AgendaAvailabilityResponse {
};
AgendaAvailabilityResponse = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
], AgendaAvailabilityResponse);

let AppointmentsRecordRequest = class AppointmentsRecordRequest {
    constructor() { }
    ;
};
AppointmentsRecordRequest.ctorParameters = () => [];
AppointmentsRecordRequest = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
], AppointmentsRecordRequest);

let AppointmentsRecordResponse = class AppointmentsRecordResponse {
    constructor() { }
    ;
};
AppointmentsRecordResponse.ctorParameters = () => [];
AppointmentsRecordResponse = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
], AppointmentsRecordResponse);

class BookAppointmentRequest {
    constructor(mutua, data_cita, id_agenda, codi_servei, enviar_mail) {
        this.mutua = mutua;
        this.data_cita = data_cita;
        this.id_agenda = id_agenda;
        this.codi_servei = codi_servei;
        this.enviar_mail = enviar_mail;
    }
    ;
}
let BookAppointmentResponse = class BookAppointmentResponse {
    constructor() { }
    ;
};
BookAppointmentResponse.ctorParameters = () => [];
BookAppointmentResponse = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
], BookAppointmentResponse);

;
class AppointmentConfirmation {
    constructor(guardar_bbdd, enviar_mail, dades) {
        this.guardar_bbdd = guardar_bbdd;
        this.enviar_mail = enviar_mail;
        this.dades = dades;
    }
    ;
}
class AppointmentDeleteConfirmation {
}
class AppointmentDetail {
    constructor(agenda_type, email, pacient_nom, pacient_cognom, id_cita, data, hora, estat, metge_nom, centre_nom, centre_adreca, centre_cp, centre_poblacio, centre_telefon) {
        this.agenda_type = agenda_type;
        this.email = email;
        this.pacient_nom = pacient_nom;
        this.pacient_cognom = pacient_cognom;
        this.id_cita = id_cita;
        this.data = data;
        this.hora = hora;
        this.estat = estat;
        this.metge_nom = metge_nom;
        this.centre_nom = centre_nom;
        this.centre_adreca = centre_adreca;
        this.centre_cp = centre_cp;
        this.centre_poblacio = centre_poblacio;
        this.centre_telefon = centre_telefon;
    }
    ;
}
let Appointment = class Appointment {
    constructor() { }
    ;
};
Appointment.ctorParameters = () => [];
Appointment = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
], Appointment);

class TeladocUser {
    constructor() { }
    ;
}
class TeladocCredentialsResponse {
    constructor() { }
    ;
}
let TeladocTimeSlot = class TeladocTimeSlot {
    constructor() { }
    ;
};
TeladocTimeSlot.ctorParameters = () => [];
TeladocTimeSlot = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
], TeladocTimeSlot);

let TeladocAvailability = class TeladocAvailability {
    constructor() { }
    ;
};
TeladocAvailability.ctorParameters = () => [];
TeladocAvailability = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
], TeladocAvailability);

let AgendaAvailability = class AgendaAvailability {
    constructor() { }
    ;
};
AgendaAvailability.ctorParameters = () => [];
AgendaAvailability = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
], AgendaAvailability);

let TeladocAvailabilityResponse = class TeladocAvailabilityResponse {
    constructor() { }
    ;
};
TeladocAvailabilityResponse.ctorParameters = () => [];
TeladocAvailabilityResponse = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
], TeladocAvailabilityResponse);

let TeladocBookAppointmentRequest = class TeladocBookAppointmentRequest {
    constructor() { }
    ;
};
TeladocBookAppointmentRequest.ctorParameters = () => [];
TeladocBookAppointmentRequest = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
], TeladocBookAppointmentRequest);

let TeladocCredentials = class TeladocCredentials {
};
TeladocCredentials = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
], TeladocCredentials);

let TeladocBookAppointmentResponse = class TeladocBookAppointmentResponse {
};
TeladocBookAppointmentResponse = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
], TeladocBookAppointmentResponse);

let TeladocStartVideocallResponse = class TeladocStartVideocallResponse {
};
TeladocStartVideocallResponse = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
], TeladocStartVideocallResponse);



/***/ }),

/***/ "Oz3r":
/*!*************************************************!*\
  !*** ./src/app/services/appointment.service.ts ***!
  \*************************************************/
/*! exports provided: AppointmentService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppointmentService", function() { return AppointmentService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "tk/3");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "kU1M");
/* harmony import */ var _config_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../config/constants */ "5Pvz");
/* harmony import */ var _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/classes/appointments */ "Cx2V");
/* harmony import */ var _api_endpoints_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./api-endpoints.service */ "7R0Y");
/* harmony import */ var _http_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./http.service */ "N+K7");
/* harmony import */ var _authentication_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./authentication.service */ "ej43");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ionic/angular */ "TEn/");










let AppointmentService = class AppointmentService {
    constructor(http, api, constants, authService, alertController) {
        this.http = http;
        this.api = api;
        this.constants = constants;
        this.authService = authService;
        this.alertController = alertController;
    }
    getAgenda() {
        const params = new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["AgendaRequest"](this.id_agenda, this.codi_servei);
        const endpoint = this.api.getEndpoint(this.constants.get_info_agenda);
        return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((res) => {
            if (res.status != 200)
                this.throwError(res);
            return res.data.map(item => {
                const agenda = new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["Agenda"]();
                return Object.assign(agenda, item);
            });
        }));
    }
    showAlert(message) {
        return this.alertController.create({
            header: 'Info',
            message: message,
            buttons: ['OK']
        });
    }
    getAgendaAvailability(params) {
        //console.log("params: ", params);
        const endpoint = this.api.getEndpoint(this.constants.get_agenda_availability);
        return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((res) => {
            if (res.status !== 200 && res.status !== 204)
                this.throwError(res);
            return res.data.map(item => {
                const agenda = new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["AgendaAvailability"]();
                return Object.assign(agenda, item);
            });
        }));
    }
    getTeladocUser() {
        const endpoint = this.api.getEndpoint('getUserTeladoc');
        const params = { username: this.authService.user.id_usuari_mgc, app: this.constants.get_teladoc_app_id, entorn: this.constants.get_teladoc_env };
        return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((res) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            console.log("getTeladocUser: ", res);
            if (res.status != 200)
                return this.throwError(res.message);
            this.teladocUser = res.data;
            return res.data;
        })));
    }
    getTeladocUser2() {
        const endpoint = this.api.getEndpoint('getUserTeladoc');
        const params = { username: this.authService.user.id_usuari_mgc, app: this.constants.get_teladoc_app_id, entorn: this.constants.get_teladoc_env };
        return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((res) => {
            console.log("getTeladocUser: ", res);
            if (res.status != 200)
                return this.throwError(res);
            this.teladocUser = res.data;
            return res.data;
        })).toPromise();
    }
    getTeladocToken(params) {
        var token;
        const endpoint = this.api.getEndpoint('teladoc/users/login');
        return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((res) => {
            //console.log('TeladocToken: ', res);
            if (res.status != "ok")
                this.throwError("Teladoc login failed");
            const credentials = new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["TeladocCredentials"]();
            return Object.assign(credentials, res.data);
        }));
    }
    getTeladocAvailability(params) {
        //console.log("params: ", params);
        const endpoint = this.api.getEndpoint('teladoc/telehealth/videocalls/availability');
        return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((res) => {
            if (res.status !== "ok")
                this.throwError(res);
            return res.data.availability.map(item => {
                const date = new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["TeladocAvailability"]();
                return Object.assign(date, item);
            });
        }));
    }
    getTeladocAppointmentInfo(id, project_id) {
        const params = {
            project_id: project_id,
            token: this.teladocCredentials.client_token
        };
        const endpoint = this.api.getEndpoint('teladoc/telehealth/videocalls/info/' + id);
        return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((res) => {
            if (res.status !== "ok")
                this.throwError(res);
            return res;
        }));
    }
    getAppointmentsRecord(params) {
        //console.log("params: ", params);
        const endpoint = this.api.getEndpoint(this.constants.get_appointments_record);
        return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((res) => {
            if (res.status !== 200)
                this.throwError(res);
            return res.data.map(item => {
                const appointment = new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["Appointment"]();
                return Object.assign(appointment, item);
            });
        }));
    }
    saveAppointment(data, isOnline, type, place, indications, staff_id) {
        data["place"] = place;
        data["indications"] = indications;
        data["date"] = data.data;
        data["staff_id"] = staff_id;
        data["online"] = isOnline;
        data["agenda_type"] = type;
        // Saves appointment in Doole
        //console.log("saveAppointment data: ", data);
        this.authService.post('mgc/agenda', { data }).subscribe((data) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () { }), (error) => {
            // Called when error
            console.log('error: ', error);
            throw new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpErrorResponse"](error);
        });
    }
    deleteAppointment(mutua, appointmentId, appointmentType, agenda) {
        const params = {
            "mutua": mutua,
            "id_cita": appointmentId,
            "enviar_mail": this.constants.send_mail
        };
        const endpoint = this.api.getEndpoint(this.constants.delete_appointment);
        return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((res) => {
            console.log("RES: ", res);
            if (res.status !== 200)
                this.throwError(res);
            return res;
        }));
    }
    getAppointmentInfo(mutua, id_cita) {
        let params = { mutua, id_cita };
        const endpoint = this.api.getEndpoint(this.constants.info_appointment);
        return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((res) => {
            if (res.status !== 200)
                this.throwError(res);
            return res.data;
        }));
    }
    deleteAppointmentDoole(appointmentId) {
        //Delele appointment in Doole
        const params = { agenda: appointmentId };
        return this.authService.post('user/agenda/delete', params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((data) => {
            return data;
        }, (error) => {
            // Called when error
            return error;
        }));
    }
    bookAppointment(mutua, date, isOnline = false, type, place, indications, staff_id) {
        let params = new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["BookAppointmentRequest"](mutua, date, this.id_agenda, this.codi_servei, this.constants.send_mail);
        //console.log("bookAppointment params:", params);
        const endpoint = this.api.getEndpoint(this.constants.make_appointment);
        return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((res) => {
            if (res.status !== 200)
                this.throwError(res);
            this.saveAppointment(res.data.dades, isOnline, type, place, indications, staff_id);
            return new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["AppointmentConfirmation"](res.data.guardar_bbdd, res.data.enviar_mail, res.data.dades);
        }));
    }
    bookMetgeTutorAppointment(mutua, date, isOnline = false, type, place, indications, staff_id) {
        let params = new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["BookAppointmentRequest"](mutua, date, this.id_agenda, this.codi_servei, this.constants.send_mail);
        //console.log("bookAppointment params:", params);
        const endpoint = this.api.getEndpoint(this.constants.make_appointment);
        return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((res) => {
            if (res.status !== 200)
                this.throwError(res);
            this.saveAppointment(res.data.dades, isOnline, type, place, indications, staff_id);
            return new _shared_classes_appointments__WEBPACK_IMPORTED_MODULE_5__["AppointmentConfirmation"](res.data.guardar_bbdd, res.data.enviar_mail, res.data.dades);
        }));
    }
    bookTeladocAppointment(params, type, place, indications, staff_id) {
        //console.log("teladocBookAppointment params:", params);
        const endpoint = this.api.getEndpoint('teladoc/telehealth/videocalls/create/' + this.teladocCredentials.client_token);
        return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((res) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            if (res.status != 'ok')
                this.throwError("Failed while creating videocall with Teladoc");
            let data = {
                data: res.data.date.replace(/-/g, ""),
                hora: res.data.time.replace(/:/g, ""),
                id_cita: res.data.id,
                metge_nom: "Consulta online",
                centre_nom: "",
                centre_adreca: "",
                centre_cp: "",
                centre_poblacio: "",
                centre_telefon: "",
            };
            this.saveAppointment(data, true, type, place, indications, staff_id);
            return res.data;
        })));
    }
    getVideocallCredentials(params) {
        //console.log("teladocBookAppointment params:", params);
        const endpoint = this.api.getEndpoint('teladoc/telehealth/videocalls/create/' + this.teladocCredentials.client_token);
        return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((res) => {
            if (res.status != 'ok')
                this.throwError("Failed while creating videocall with Teladoc");
            const data = res.data;
            const postData = {
                data: {
                    data: data.date,
                    hora: data.time,
                    id_cita: data.id,
                    metge_nom: "",
                    centre_nom: "",
                    centre_adreca: "",
                    centre_cp: "",
                    centre_poblacio: "",
                    centre_telefon: ""
                }
            };
            // save apoointment in backoffice
            this.authService.post('mgc/agenda', postData).subscribe((data) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () { }), (error) => {
                // Called when error
                console.log('error: ', error);
                throw new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpErrorResponse"](error);
            });
            return res.data;
        }));
    }
    startTeladocVideocall(id, project_id) {
        const params = {
            id: id,
            project_id: project_id
        };
        //console.log("teladocBookAppointment params:", params);
        const endpoint = this.api.getEndpoint('teladoc/telehealth/videocalls/start/' + this.teladocCredentials.client_token);
        return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((res) => {
            //if (res.status != 'ok')
            //this.throwError("Failed while creating videocall with Teladoc");
            return res;
        }));
    }
    deleteAppointmentTeladoc(appointmentId, project_id) {
        const params = {
            id: appointmentId,
            project_id: project_id
        };
        console.log('deleteAppointmentTeladoc params: ', params);
        //console.log("teladocBookAppointment params:", params);
        const endpoint = this.api.getEndpoint('teladoc/telehealth/videocalls/cancel/' + this.teladocCredentials.client_token);
        return this.http.post(endpoint, params).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((res) => {
            console.log("deleteAppointmentTeladoc Response: ", res);
            if (res.status != 'ok')
                this.throwError(res.data);
            return res.data;
        }));
    }
    throwError(error) {
        if (error instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpErrorResponse"])
            throw new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpErrorResponse"](error);
        else
            throw new Error(error);
    }
    get(endpt) {
        const endpoint = this.api.getDooleEndpoint(endpt);
        return this.http.get(endpoint).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((res) => {
            return res;
        }));
    }
    post(endpt, items) {
        const endpoint = this.api.getDooleEndpoint(endpt);
        return this.http.post(endpoint, items).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((res) => {
            return res;
        }));
    }
};
AppointmentService.ctorParameters = () => [
    { type: _http_service__WEBPACK_IMPORTED_MODULE_7__["HttpService"] },
    { type: _api_endpoints_service__WEBPACK_IMPORTED_MODULE_6__["ApiEndpointsService"] },
    { type: _config_constants__WEBPACK_IMPORTED_MODULE_4__["Constants"] },
    { type: _authentication_service__WEBPACK_IMPORTED_MODULE_8__["AuthenticationService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_9__["AlertController"] }
];
AppointmentService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"])({
        providedIn: 'root'
    })
], AppointmentService);



/***/ })

}]);
//# sourceMappingURL=default~appointments-appointments-module~bookmarks-bookmarks-module~centers-centers-module~contact-c~886963fb-es2015.js.map
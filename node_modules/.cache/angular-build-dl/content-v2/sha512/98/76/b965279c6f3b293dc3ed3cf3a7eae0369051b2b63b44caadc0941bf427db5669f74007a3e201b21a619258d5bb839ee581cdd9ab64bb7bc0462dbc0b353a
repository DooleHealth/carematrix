(function () {
  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  (window["webpackJsonp"] = window["webpackJsonp"] || []).push([["appointments-appointments-module"], {
    /***/
    "KVmr":
    /*!***************************************************************************!*\
      !*** ./src/app/pages/home/healthcare/appointments/appointments.page.scss ***!
      \***************************************************************************/

    /*! exports provided: default */

    /***/
    function KVmr(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "ion-content {\n  --background: none;\n  background-position: center top;\n  background-repeat: no-repeat !important;\n  background-size: cover !important;\n}\n\nion-card {\n  border-radius: 0%;\n  border-bottom: 2pt solid #006488;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2FwcG9pbnRtZW50cy5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUNBLCtCQUFBO0VBQ0EsdUNBQUE7RUFDQSxpQ0FBQTtBQUNGOztBQUNBO0VBQ0UsaUJBQUE7RUFDQSxnQ0FBQTtBQUVGIiwiZmlsZSI6ImFwcG9pbnRtZW50cy5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tY29udGVudCB7XG4gIC0tYmFja2dyb3VuZDogbm9uZTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIHRvcDtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdCAhaW1wb3J0YW50O1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyICFpbXBvcnRhbnQ7XG59XG5pb24tY2FyZHtcbiAgYm9yZGVyLXJhZGl1czogMCU7XG4gIGJvcmRlci1ib3R0b206IDJwdCBzb2xpZCAjMDA2NDg4O1xuXG59XG5cbiJdfQ== */";
      /***/
    },

    /***/
    "RAs3":
    /*!***********************************************************************************!*\
      !*** ./src/app/pages/home/healthcare/appointments/appointments-routing.module.ts ***!
      \***********************************************************************************/

    /*! exports provided: AppointmentsPageRoutingModule */

    /***/
    function RAs3(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AppointmentsPageRoutingModule", function () {
        return AppointmentsPageRoutingModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _appointments_page__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./appointments.page */
      "WFm2");

      var routes = [{
        path: '',
        component: _appointments_page__WEBPACK_IMPORTED_MODULE_3__["AppointmentsPage"]
      }, {
        path: 'agenda',
        loadChildren: function loadChildren() {
          return __webpack_require__.e(
          /*! import() | agenda-agenda-module */
          "agenda-agenda-module").then(__webpack_require__.bind(null,
          /*! ../agenda/agenda.module */
          "ydXL")).then(function (m) {
            return m.AgendaPageModule;
          });
        }
      }, {
        path: 'success',
        loadChildren: function loadChildren() {
          return Promise.all(
          /*! import() | success-success-module */
          [__webpack_require__.e("default~appointments-appointments-module~bookmarks-bookmarks-module~centers-centers-module~contact-c~886963fb"), __webpack_require__.e("success-success-module")]).then(__webpack_require__.bind(null,
          /*! ./success/success.module */
          "WiOt")).then(function (m) {
            return m.SuccessPageModule;
          });
        }
      }, {
        path: 'videocall',
        loadChildren: function loadChildren() {
          return __webpack_require__.e(
          /*! import() | videocalls-videocalls-module */
          "default~pages-home-healthcare-videocalls-videocalls-module~videocalls-videocalls-module").then(__webpack_require__.bind(null,
          /*! ../videocalls/videocalls.module */
          "bM2s")).then(function (m) {
            return m.VideocallsPageModule;
          });
        }
      }];

      var AppointmentsPageRoutingModule = function AppointmentsPageRoutingModule() {
        _classCallCheck(this, AppointmentsPageRoutingModule);
      };

      AppointmentsPageRoutingModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(routes)],
        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]]
      })], AppointmentsPageRoutingModule);
      /***/
    },

    /***/
    "WFm2":
    /*!*************************************************************************!*\
      !*** ./src/app/pages/home/healthcare/appointments/appointments.page.ts ***!
      \*************************************************************************/

    /*! exports provided: AppointmentsPage */

    /***/
    function WFm2(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AppointmentsPage", function () {
        return AppointmentsPage;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_appointments_page_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./appointments.page.html */
      "e9Pd");
      /* harmony import */


      var _appointments_page_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./appointments.page.scss */
      "KVmr");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var src_app_services_appointment_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! src/app/services/appointment.service */
      "Oz3r");
      /* harmony import */


      var src_app_services_authentication_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! src/app/services/authentication.service */
      "ej43");
      /* harmony import */


      var src_app_shared_classes_appointments__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! src/app/shared/classes/appointments */
      "Cx2V");
      /* harmony import */


      var _ionic_angular__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @ionic/angular */
      "TEn/");
      /* harmony import */


      var src_app_shared_classes_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! src/app/shared/classes/utils */
      "hNG5");

      var AppointmentsPage = /*#__PURE__*/function () {
        function AppointmentsPage(router, appointmentService, authService, datepipe, alertController, location) {
          _classCallCheck(this, AppointmentsPage);

          var _a, _b, _c, _d;

          this.router = router;
          this.appointmentService = appointmentService;
          this.authService = authService;
          this.datepipe = datepipe;
          this.alertController = alertController;
          this.location = location;
          this.backgroundImage = Object(src_app_shared_classes_utils__WEBPACK_IMPORTED_MODULE_10__["getRandomBackground"])();
          this.agendas = [];
          this.data_inici = new Date();
          this.data_fi = new Date();
          this.appointmentType = (_a = history.state) === null || _a === void 0 ? void 0 : _a.appointmentType;
          this.isOnline = (_b = history.state) === null || _b === void 0 ? void 0 : _b.isOnline;
          this.isAppointmentChange = (_c = history.state) === null || _c === void 0 ? void 0 : _c.isAppointmentChange;
          this.fromSymptonChecker = (_d = history.state) === null || _d === void 0 ? void 0 : _d.fromSymptonChecker;
          this.showProcessing = false; // Look for appointments between the next 2 hours and 2 months

          this.data_inici.setHours(this.data_inici.getHours() + 2);
          this.data_fi.setMonth(this.data_inici.getMonth() + 2);
        }

        _createClass(AppointmentsPage, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            this.setPageHeader();
            console.log('this.isAppointmentChange: ', this.isAppointmentChange);
            if (this.appointmentType == 6) // Teladoc
              this.getTeladocAgenda2();else {
              // MGC or Medico Tutor
              if (this.appointmentType == 7 && !this.appointmentService.metgeTutor) this.getMetgeTutor();else if (this.isAppointmentChange) this.editAgenda();else this.getAgenda();
            }
          }
        }, {
          key: "setPageHeader",
          value: function setPageHeader() {
            // Set headers and icons 
            switch (+this.appointmentType) {
              case 5:
                this.icon = '../../assets/icons/i_consulta_presencial.svg';
                this.header = 'appointments.face-to-face';
                this.infor = '../../assets/icons/interrogant.svg';
                break;

              case 6:
                console.log('this.appointmentType case 6: ', this.appointmentType, 'this is online:', this.isOnline);
                this.icon = '../../assets/icons/i_videoconsulta.svg';
                this.header = 'appointments.online';
                this.infor = '../../assets/icons/interrogant.svg';
                break;

              case 7:
                this.icon = this.isOnline ? '../../assets/icons/i_consulta_online.svg' : '../../assets/icons/i_consulta_presencial.svg';
                this.header = this.isOnline ? 'appointments.online' : 'appointments.face-to-face';
                this.infor = '../../assets/icons/interrogant.svg';
                break;

              default:
                console.log('this.appointmentType DEFAULT: ', this.appointmentType, 'this is online:', this.isOnline);
                this.icon = '../../assets/icons/i_consulta_presencial.svg';
                this.header = 'appointments.face-to-face';
                this.infor = '../../assets/icons/interrogant.svg';
            }
          }
        }, {
          key: "getTeladocAgenda2",
          value: function getTeladocAgenda2() {
            var _this = this;

            this.getTeladocUser2().then(function (res) {
              // here you will have your `rs`
              console.log('ITeladocUser: ', res);
              _this.teladocUser = res;

              var data_inici = _this.datepipe.transform(_this.data_inici, 'YYYY-MM-dd');

              var data_fi = _this.datepipe.transform(_this.data_fi, 'YYYY-MM-dd');

              console.log('this.teladocUser: ', _this.teladocUser);
              var params = {
                date_from: data_inici,
                date_to: data_fi,
                project_id: _this.teladocUser.project_id,
                time_zone: "Europe/Madrid",
                language: _this.teladocUser.language
              };

              _this.appointmentService.getTeladocAvailability(params).subscribe(function (data) {
                return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          console.log("2 getTeladocAvailability: ", data.length);
                          this.teladocSchedules = data;
                          this.getNextTeladocAppointment();

                        case 3:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee, this);
                }));
              }, function (error) {
                return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          // Called when error
                          this.location.back();
                          throw error;

                        case 2:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2, this);
                }));
              });

              _this.getTeladocSchedule();
            })["catch"](function (error) {
              _this.location.back();

              throw error;
            });
          } // Function Definition (using async/await as demonstration)

        }, {
          key: "getTeladocUser2",
          value: function getTeladocUser2() {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
              return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      _context3.next = 2;
                      return this.appointmentService.getTeladocUser2();

                    case 2:
                      return _context3.abrupt("return", _context3.sent);

                    case 3:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3, this);
            }));
          }
        }, {
          key: "getTeladocAgenda",
          value: function getTeladocAgenda() {
            var _this2 = this;

            this.appointmentService.getTeladocUser().subscribe(function (data) {
              return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this2, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        this.teladocUser = data;
                        console.log("1 teladocUser: ", data);

                      case 2:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4, this);
              }));
            }, function (error) {
              return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this2, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        console.log("ERROR: ", error);
                        this.location.back();
                        throw error;

                      case 3:
                      case "end":
                        return _context5.stop();
                    }
                  }
                }, _callee5, this);
              }));
            });
          }
        }, {
          key: "getTeladocSchedule",
          value: function getTeladocSchedule() {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
              return regeneratorRuntime.wrap(function _callee6$(_context6) {
                while (1) {
                  switch (_context6.prev = _context6.next) {
                    case 0:
                    case "end":
                      return _context6.stop();
                  }
                }
              }, _callee6);
            }));
          }
        }, {
          key: "editAgenda",
          value: function editAgenda() {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
              var _this3 = this;

              var agenda;
              return regeneratorRuntime.wrap(function _callee10$(_context10) {
                while (1) {
                  switch (_context10.prev = _context10.next) {
                    case 0:
                      console.log("getAppointmentInfo for agenda: ", history.state.agenda);
                      agenda = history.state.agenda;
                      this.appointmentService.getAppointmentInfo(this.authService.user.mutua, agenda.ext_id).subscribe(function (data) {
                        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this3, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                          var _this4 = this;

                          return regeneratorRuntime.wrap(function _callee8$(_context8) {
                            while (1) {
                              switch (_context8.prev = _context8.next) {
                                case 0:
                                  _context8.next = 2;
                                  return data;

                                case 2:
                                  console.log("1 getAppointmentInfo: ", data);
                                  this.appointmentService.id_agenda = data.id_agenda;
                                  this.appointmentService.codi_servei = data.codi_servei;
                                  this.appointmentService.getAgenda().subscribe(function (data) {
                                    return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this4, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                                      return regeneratorRuntime.wrap(function _callee7$(_context7) {
                                        while (1) {
                                          switch (_context7.prev = _context7.next) {
                                            case 0:
                                              console.log('2 getAgenda: ', data); // Wait for Provider's Agenda

                                              this.agendas = data;
                                              _context7.next = 4;
                                              return this.getAgendaSchedule();

                                            case 4:
                                            case "end":
                                              return _context7.stop();
                                          }
                                        }
                                      }, _callee7, this);
                                    }));
                                  });

                                case 6:
                                case "end":
                                  return _context8.stop();
                              }
                            }
                          }, _callee8, this);
                        }));
                      }, function (error) {
                        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this3, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                          return regeneratorRuntime.wrap(function _callee9$(_context9) {
                            while (1) {
                              switch (_context9.prev = _context9.next) {
                                case 0:
                                  console.log("EDIT AGENDA ERROR: ", error);
                                  this.location.back();
                                  throw error;

                                case 3:
                                case "end":
                                  return _context9.stop();
                              }
                            }
                          }, _callee9, this);
                        }));
                      });

                    case 3:
                    case "end":
                      return _context10.stop();
                  }
                }
              }, _callee10, this);
            }));
          }
        }, {
          key: "getAgenda",
          value: function getAgenda() {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
              var _this5 = this;

              return regeneratorRuntime.wrap(function _callee13$(_context13) {
                while (1) {
                  switch (_context13.prev = _context13.next) {
                    case 0:
                      this.appointmentService.getAgenda().subscribe(function (data) {
                        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this5, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
                          return regeneratorRuntime.wrap(function _callee11$(_context11) {
                            while (1) {
                              switch (_context11.prev = _context11.next) {
                                case 0:
                                  // Wait for Provider's Agenda
                                  this.agendas = data;
                                  _context11.next = 3;
                                  return this.getAgendaSchedule();

                                case 3:
                                case "end":
                                  return _context11.stop();
                              }
                            }
                          }, _callee11, this);
                        }));
                      }), function (error) {
                        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this5, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
                          return regeneratorRuntime.wrap(function _callee12$(_context12) {
                            while (1) {
                              switch (_context12.prev = _context12.next) {
                                case 0:
                                  // Called when error
                                  this.location.back();
                                  throw error;

                                case 2:
                                case "end":
                                  return _context12.stop();
                              }
                            }
                          }, _callee12, this);
                        }));
                      };

                    case 1:
                    case "end":
                      return _context13.stop();
                  }
                }
              }, _callee13, this);
            }));
          }
        }, {
          key: "getMetgeTutor",
          value: function getMetgeTutor() {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
              var _this6 = this;

              return regeneratorRuntime.wrap(function _callee16$(_context16) {
                while (1) {
                  switch (_context16.prev = _context16.next) {
                    case 0:
                      this.appointmentService.get('mgc/metgetutor').subscribe(function (data) {
                        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this6, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
                          return regeneratorRuntime.wrap(function _callee14$(_context14) {
                            while (1) {
                              switch (_context14.prev = _context14.next) {
                                case 0:
                                  _context14.next = 2;
                                  return data;

                                case 2:
                                  _context14.t0 = console;
                                  _context14.next = 5;
                                  return data;

                                case 5:
                                  _context14.t1 = _context14.sent;

                                  _context14.t0.log.call(_context14.t0, 'mgc/metgetutor', _context14.t1);

                                  // Validates metgetutor is assigned
                                  if (data.tutor && data.meta) {
                                    this.appointmentService.codi_servei = data.meta.metge_codi_especialitat;
                                    this.appointmentService.id_agenda = data.meta.metge_id_agenda;
                                    this.appointmentService.tractament = data.meta.metge_tractament;
                                    this.appointmentService.metgeTutor = data;
                                  }

                                  this.getAgenda();
                                  this.showProcessing = false;

                                case 10:
                                case "end":
                                  return _context14.stop();
                              }
                            }
                          }, _callee14, this);
                        }));
                      }, function (error) {
                        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this6, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
                          return regeneratorRuntime.wrap(function _callee15$(_context15) {
                            while (1) {
                              switch (_context15.prev = _context15.next) {
                                case 0:
                                  // Called when error
                                  this.location.back();
                                  throw error;

                                case 2:
                                case "end":
                                  return _context15.stop();
                              }
                            }
                          }, _callee15, this);
                        }));
                      });

                    case 1:
                    case "end":
                      return _context16.stop();
                  }
                }
              }, _callee16, this);
            }));
          }
        }, {
          key: "getAppointmentInfo",
          value: function getAppointmentInfo() {
            var _this7 = this;

            console.log("getAppointmentInfo: ", history.state.agenda);
            var agenda = history.state.agenda;
            return this.appointmentService.getAppointmentInfo(this.authService.user.mutua, agenda.ext_id).subscribe(function (data) {
              return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this7, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
                return regeneratorRuntime.wrap(function _callee17$(_context17) {
                  while (1) {
                    switch (_context17.prev = _context17.next) {
                      case 0:
                        _context17.next = 2;
                        return data;

                      case 2:
                        console.log("isAppointmentChange response: ", data);
                        this.appointmentService.id_agenda = data.id_agenda;
                        this.appointmentService.codi_servei = data.codi_servei;

                      case 5:
                      case "end":
                        return _context17.stop();
                    }
                  }
                }, _callee17, this);
              }));
            }, function (error) {
              return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this7, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
                return regeneratorRuntime.wrap(function _callee18$(_context18) {
                  while (1) {
                    switch (_context18.prev = _context18.next) {
                      case 0:
                        // Called when error
                        this.location.back();
                        throw error;

                      case 2:
                      case "end":
                        return _context18.stop();
                    }
                  }
                }, _callee18, this);
              }));
            });
          }
        }, {
          key: "getAgendaSchedule",
          value: function getAgendaSchedule() {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {
              var _this8 = this;

              var data_inici, data_fi, request;
              return regeneratorRuntime.wrap(function _callee21$(_context21) {
                while (1) {
                  switch (_context21.prev = _context21.next) {
                    case 0:
                      data_inici = this.datepipe.transform(this.data_inici, 'YYYYMMdd');
                      data_fi = this.datepipe.transform(this.data_fi, 'YYYYMMdd');
                      request = new src_app_shared_classes_appointments__WEBPACK_IMPORTED_MODULE_8__["AgendaAvailabilityRequest"](this.appointmentService.id_agenda, data_inici, data_fi);
                      this.appointmentService.getAgendaAvailability(request).subscribe(function (data) {
                        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this8, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
                          return regeneratorRuntime.wrap(function _callee19$(_context19) {
                            while (1) {
                              switch (_context19.prev = _context19.next) {
                                case 0:
                                  // Provider's availability for the next 2 months
                                  if (data.length < 1) this.error = "Ho sentim, no hi ha cites disponibles";else {
                                    this.schedules = data;
                                    if (this.appointment === undefined) this.getNextAvailableAppointment();
                                  }

                                case 1:
                                case "end":
                                  return _context19.stop();
                              }
                            }
                          }, _callee19, this);
                        }));
                      }, function (error) {
                        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this8, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {
                          return regeneratorRuntime.wrap(function _callee20$(_context20) {
                            while (1) {
                              switch (_context20.prev = _context20.next) {
                                case 0:
                                  // Called when error
                                  this.location.back();
                                  throw error;

                                case 2:
                                case "end":
                                  return _context20.stop();
                              }
                            }
                          }, _callee20, this);
                        }));
                      });

                    case 4:
                    case "end":
                      return _context21.stop();
                  }
                }
              }, _callee21, this);
            }));
          }
        }, {
          key: "changeDate",
          value: function changeDate() {
            //console.log("this.appointmentType", this.appointmentType);
            this.appointmentService.appointment = this.appointment;
            this.appointmentService.teladocUser = this.teladocUser;

            if (this.appointmentType == 6) {
              //console.log("teladocAppointment");
              this.appointmentService.teladocSchedules = this.teladocSchedules;
            } else {
              //console.log("mgc|metge-tutor appointment");
              this.appointmentService.schedules = this.schedules;
            }

            this.router.navigate(['/app/home/healthcare/appointments/agenda'], {
              state: {
                isOnline: this.isOnline,
                appointmentType: this.appointmentType,
                isAppointmentChange: this.isAppointmentChange,
                agenda: history.state.agenda,
                fromSymptonChecker: this.fromSymptonChecker
              }
            });
          }
        }, {
          key: "getNextAvailableAppointment",
          value: function getNextAvailableAppointment() {
            var _this9 = this;

            console.log('3 getNextAvailableAppointment');
            var next_appointment;
            var endTime; // Iterate for each day

            this.schedules.every(function (element) {
              // convert API date to format YYYY-MM-DD
              var pattern = /(\d{4})(\d{2})(\d{2})/;
              var current = new Date(element.data.replace(pattern, '$1-$2-$3')); // Iterate for each available hour

              element.horaris.every(function (item) {
                // Check if it's available
                if (item.disponible) {
                  next_appointment = new Date(current); // Time format response is "HHMM", so we extracts HH and MM

                  next_appointment.setHours(parseInt(item.hora.substring(0, 2)));
                  next_appointment.setMinutes(parseInt(item.hora.substring(2, 4))); // Set end time 15 minutes after start time

                  endTime = new Date(next_appointment);
                  endTime.setMinutes(next_appointment.getMinutes() + 15); // Add the time slot to calendar events array

                  _this9.appointment = next_appointment; //console.log("FirstAvailableDate: ", this.appointment.toLocaleDateString('es-ES'), " <- getDate().toLocaleString() -> toLocaleTimeString:", this.appointment.toLocaleTimeString());

                  return false;
                }
              });
            });
          }
        }, {
          key: "getNextTeladocAppointment",
          value: function getNextTeladocAppointment() {
            var next_appointment;
            var endTime;
            var flag = false; // Iterate for each day
            //console.log("this.teladocSchedules: ", this.teladocSchedules);

            var _iterator = _createForOfIteratorHelper(this.teladocSchedules),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var element = _step.value;
                // convert API date to format YYYY-MM-DD
                var pattern = /(\d{4})(\d{2})(\d{2})/;
                var current = new Date(element.date); // Iterate for each available hour
                //console.log('entry', element.date)

                var _iterator2 = _createForOfIteratorHelper(element.day_slots),
                    _step2;

                try {
                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                    var item = _step2.value;

                    //console.log('entry', item.availability);
                    if (item.availability) {
                      // Check if it's available
                      next_appointment = new Date(current); // Time format response is "HHMM", so we extracts HH and MM

                      next_appointment.setHours(parseInt(item.time_ini.substring(0, 2)));
                      next_appointment.setMinutes(parseInt(item.time_ini.substring(3, 5))); // Set end time 15 minutes after start time

                      endTime = new Date(next_appointment);
                      endTime.setMinutes(next_appointment.getMinutes() + 15); // Add the time slot to calendar events array

                      this.appointment = next_appointment;
                      console.log("FirstAvailableDate: ", this.appointment.toLocaleDateString('es-ES'), " <- getDate().toLocaleString() -> toLocaleTimeString:", this.appointment.toLocaleTimeString()); //console.log("FOUND");

                      flag = true;
                      break;
                    }
                  }
                } catch (err) {
                  _iterator2.e(err);
                } finally {
                  _iterator2.f();
                }

                if (flag) {
                  break;
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        }, {
          key: "makeAppointment",
          value: function makeAppointment() {
            var _a;

            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
              var date, time, staff_id;
              return regeneratorRuntime.wrap(function _callee22$(_context22) {
                while (1) {
                  switch (_context22.prev = _context22.next) {
                    case 0:
                      this.appointmentService.appointment = this.appointment; // Teladoc appointmentType = 6

                      if (this.appointmentType == 6) {
                        this.appointmentService.teladocUser = this.teladocUser;
                        this.router.navigate(['/app/home/healthcare/appointments/videocall'], {
                          state: {
                            isOnline: this.isOnline,
                            appointmentType: this.appointmentType,
                            isAppointmentChange: this.isAppointmentChange,
                            agenda: history.state.agenda,
                            fromSymptonChecker: this.fromSymptonChecker
                          }
                        });
                      } else {
                        this.showProcessing = true;
                        date = this.datepipe.transform(this.appointmentService.appointment, "yyyyMMdd");
                        time = this.datepipe.transform(this.appointmentService.appointment, "HHmm"); // Iff appointment is with metge tutor (7), assign staff_id

                        staff_id = this.appointmentType == 7 ? (_a = this.appointmentService.metgeTutor) === null || _a === void 0 ? void 0 : _a.tutor.id : "";
                        console.log(" this.appointmentType: ", this.appointmentType);
                        console.log("staff_id: ", staff_id); // save apointment

                        this.saveAppointment(date + time, staff_id);
                      }

                    case 2:
                    case "end":
                      return _context22.stop();
                  }
                }
              }, _callee22, this);
            }));
          }
        }, {
          key: "saveAppointment",
          value: function saveAppointment(date, staff_id) {
            var _this10 = this;

            return this.appointmentService.bookAppointment(this.authService.mutua, date, this.isOnline, this.appointmentType, "", "", staff_id).subscribe(function (res) {
              return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this10, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee23() {
                var previousAppointment;
                return regeneratorRuntime.wrap(function _callee23$(_context23) {
                  while (1) {
                    switch (_context23.prev = _context23.next) {
                      case 0:
                        console.log("Appointment OK: ", res.dades);
                        this.booking = res.dades;
                        this.appointmentService.booking = res.dades;

                        if (this.isAppointmentChange) {
                          previousAppointment = history.state.agenda;
                          this.deletePreviousAppointment(previousAppointment);
                        } else {
                          this.router.navigate(['/app/home/healthcare/appointments/success'], {
                            state: {
                              isOnline: this.isOnline,
                              appointmentType: this.appointmentType,
                              isAppointmentChange: this.isAppointmentChange,
                              agenda: history.state.agenda
                            }
                          });
                        }

                      case 4:
                      case "end":
                        return _context23.stop();
                    }
                  }
                }, _callee23, this);
              }));
            }, function (error) {
              return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this10, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {
                return regeneratorRuntime.wrap(function _callee24$(_context24) {
                  while (1) {
                    switch (_context24.prev = _context24.next) {
                      case 0:
                        this.showProcessing = false;
                        console.log("** ERROR saveAppointment", error);

                      case 2:
                      case "end":
                        return _context24.stop();
                    }
                  }
                }, _callee24, this);
              }));
            }, function () {});
          }
        }, {
          key: "deletePreviousAppointment",
          value: function deletePreviousAppointment(previousAppointment) {
            var _this11 = this;

            console.log("deletePreviousAppointment appointmentType: ", this.appointmentType);
            return this.appointmentService.deleteAppointment(this.authService.mutua, previousAppointment.ext_id, this.appointmentType, previousAppointment).subscribe(function (data) {
              return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this11, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
                return regeneratorRuntime.wrap(function _callee25$(_context25) {
                  while (1) {
                    switch (_context25.prev = _context25.next) {
                      case 0:
                        console.log("1 - deleted appointment MGC");
                        this.deleteAppointmentDoole(previousAppointment.id);

                      case 2:
                      case "end":
                        return _context25.stop();
                    }
                  }
                }, _callee25, this);
              }));
            }, function (error) {
              return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this11, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee26() {
                return regeneratorRuntime.wrap(function _callee26$(_context26) {
                  while (1) {
                    switch (_context26.prev = _context26.next) {
                      case 0:
                        _context26.t0 = console;
                        _context26.next = 3;
                        return error;

                      case 3:
                        _context26.t1 = _context26.sent;

                        _context26.t0.log.call(_context26.t0, "error:", _context26.t1);

                        this.location.back();
                        throw error;

                      case 7:
                      case "end":
                        return _context26.stop();
                    }
                  }
                }, _callee26, this);
              }));
            });
          }
        }, {
          key: "deleteAppointmentDoole",
          value: function deleteAppointmentDoole(id) {
            var _this12 = this;

            return this.appointmentService.deleteAppointmentDoole(id).subscribe(function (data) {
              return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this12, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee27() {
                return regeneratorRuntime.wrap(function _callee27$(_context27) {
                  while (1) {
                    switch (_context27.prev = _context27.next) {
                      case 0:
                        console.log("2 - deleted appointment doole ", data);
                        this.router.navigate(['/app/home/healthcare/appointments/success'], {
                          state: {
                            isOnline: this.isOnline,
                            appointmentType: this.appointmentType,
                            isAppointmentChange: this.isAppointmentChange,
                            agenda: history.state.agenda
                          }
                        });
                        return _context27.abrupt("return", data);

                      case 3:
                      case "end":
                        return _context27.stop();
                    }
                  }
                }, _callee27, this);
              }));
            });
          }
        }]);

        return AppointmentsPage;
      }();

      AppointmentsPage.ctorParameters = function () {
        return [{
          type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"]
        }, {
          type: src_app_services_appointment_service__WEBPACK_IMPORTED_MODULE_6__["AppointmentService"]
        }, {
          type: src_app_services_authentication_service__WEBPACK_IMPORTED_MODULE_7__["AuthenticationService"]
        }, {
          type: _angular_common__WEBPACK_IMPORTED_MODULE_3__["DatePipe"]
        }, {
          type: _ionic_angular__WEBPACK_IMPORTED_MODULE_9__["AlertController"]
        }, {
          type: _angular_common__WEBPACK_IMPORTED_MODULE_3__["Location"]
        }];
      };

      AppointmentsPage = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"])({
        selector: 'app-appointments',
        template: _raw_loader_appointments_page_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        providers: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["DatePipe"]],
        styles: [_appointments_page_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      })], AppointmentsPage);
      /***/
    },

    /***/
    "e9Pd":
    /*!*****************************************************************************************************************!*\
      !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/pages/home/healthcare/appointments/appointments.page.html ***!
      \*****************************************************************************************************************/

    /*! exports provided: default */

    /***/
    function e9Pd(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<custom-header></custom-header>\n<ion-content class=\"back\" [ngStyle]=\"{'background': 'url(' + backgroundImage + ')'}\" fullscreen>\n  <page-header title=\"{{this.header | translate}}\" icon=\"{{this.icon}}\" info=\"{{ 'appointments.info' | translate}}\" >\n  </page-header>\n  <div class=\"main-container\">\n    <ng-container *ngIf=\"this.showProcessing else showSchedule\">\n      <div style=\"margin: 20px 40px; text-align: center;\">\n        <ion-spinner></ion-spinner>\n        <p>\n          <b>{{ 'appointments.save' | translate }}</b>\n        </p>\n      </div>\n    </ng-container>\n    <ng-template #showSchedule>\n      <ng-container *ngIf=\"!this.appointment && !this.error\">\n        <div style=\"margin: 20px 40px; text-align: center;\">\n          <ion-spinner></ion-spinner>\n          <p>\n            <b>{{ 'appointments.fetching' | translate }}</b>\n          </p>\n        </div>\n      </ng-container>\n    \n      <ng-container *ngIf=\"appointment && !error\">\n      \n        <p>{{ 'appointments.availability' | translate }}</p>\n      \n      <div *ngIf=\"appointmentType==6; else elseBlock\"> \n    \n          <ion-card>\n            <ion-card-content style=\"text-align: center;\">\n            <ion-card-title>{{ appointment.toLocaleDateString('es-ES',{ hour12: false }) + \",\" }} {{  appointment.toLocaleTimeString([], {hour12: false , hour: '2-digit', minute:'2-digit'}) + \" h\" }}</ion-card-title>\n            <ion-card-header>\n              <h3>{{'appointments.general-speciality'| translate }}</h3>\n            </ion-card-header>\n              \n          </ion-card-content>\n        </ion-card>\n      </div>\n      \n        <ng-template #elseBlock>\n          <ion-card *ngFor=\"let agenda of agendas\">\n          <ion-card-content style=\"text-align: center;\">\n            <ion-card-title> {{ appointment.toLocaleDateString('es-ES',{ hour12: false }) + \",\" }} {{  appointment.toLocaleTimeString([], { hour12: false, hour: '2-digit', minute:'2-digit'}) + \" h\" }}</ion-card-title>\n            <ion-card-header>\n           \n              <h3>{{'appointments.speciality'| translate }} {{ this.agenda.servei_nom}}</h3>\n              {{ this.agenda.centre_telefon }}\n            </ion-card-header>\n            </ion-card-content>\n          </ion-card>\n    \n        </ng-template>\n       \n        <ion-row style=\"margin-top: -4%; margin-left: 2%; margin-right: 2%;\">\n          <ion-col size=\"6\" style=\"text-align: left;\"><ion-button (click)=\"changeDate()\">{{ 'appointments.calendar' | translate | uppercase}}</ion-button></ion-col>\n          <ion-col size=\"6\" style=\"text-align: right;\"><ion-button (click)=\"makeAppointment()\">{{ 'appointments.book' | translate | uppercase}}</ion-button></ion-col>\n        </ion-row>\n       \n      </ng-container>\n    \n      <ng-container *ngIf=\"this.error\">\n      <div style=\"margin: 20px 40px; text-align: center;\">\n        <p>\n          <b>{{ this.error | translate }}</b>\n        </p>\n      </div>\n      </ng-container>\n    </ng-template>\n \n</div> \n</ion-content>\n";
      /***/
    },

    /***/
    "qNzy":
    /*!***************************************************************************!*\
      !*** ./src/app/pages/home/healthcare/appointments/appointments.module.ts ***!
      \***************************************************************************/

    /*! exports provided: AppointmentsPageModule */

    /***/
    function qNzy(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AppointmentsPageModule", function () {
        return AppointmentsPageModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ionic/angular */
      "TEn/");
      /* harmony import */


      var _appointments_routing_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./appointments-routing.module */
      "RAs3");
      /* harmony import */


      var _appointments_page__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ./appointments.page */
      "WFm2");
      /* harmony import */


      var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @ngx-translate/core */
      "sYmb");
      /* harmony import */


      var src_app_components_components_module__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! src/app/components/components.module */
      "j1ZV");

      var AppointmentsPageModule = function AppointmentsPageModule() {
        _classCallCheck(this, AppointmentsPageModule);
      };

      AppointmentsPageModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"], _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["IonicModule"], _appointments_routing_module__WEBPACK_IMPORTED_MODULE_5__["AppointmentsPageRoutingModule"], _ngx_translate_core__WEBPACK_IMPORTED_MODULE_7__["TranslateModule"], src_app_components_components_module__WEBPACK_IMPORTED_MODULE_8__["ComponentsModule"]],
        declarations: [_appointments_page__WEBPACK_IMPORTED_MODULE_6__["AppointmentsPage"]]
      })], AppointmentsPageModule);
      /***/
    }
  }]);
})();
//# sourceMappingURL=appointments-appointments-module-es5.js.map
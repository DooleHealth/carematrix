(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["appointments-appointments-module"],{

/***/ "KVmr":
/*!***************************************************************************!*\
  !*** ./src/app/pages/home/healthcare/appointments/appointments.page.scss ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("ion-content {\n  --background: none;\n  background-position: center top;\n  background-repeat: no-repeat !important;\n  background-size: cover !important;\n}\n\nion-card {\n  border-radius: 0%;\n  border-bottom: 2pt solid #006488;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2FwcG9pbnRtZW50cy5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUNBLCtCQUFBO0VBQ0EsdUNBQUE7RUFDQSxpQ0FBQTtBQUNGOztBQUNBO0VBQ0UsaUJBQUE7RUFDQSxnQ0FBQTtBQUVGIiwiZmlsZSI6ImFwcG9pbnRtZW50cy5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tY29udGVudCB7XG4gIC0tYmFja2dyb3VuZDogbm9uZTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIHRvcDtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdCAhaW1wb3J0YW50O1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyICFpbXBvcnRhbnQ7XG59XG5pb24tY2FyZHtcbiAgYm9yZGVyLXJhZGl1czogMCU7XG4gIGJvcmRlci1ib3R0b206IDJwdCBzb2xpZCAjMDA2NDg4O1xuXG59XG5cbiJdfQ== */");

/***/ }),

/***/ "RAs3":
/*!***********************************************************************************!*\
  !*** ./src/app/pages/home/healthcare/appointments/appointments-routing.module.ts ***!
  \***********************************************************************************/
/*! exports provided: AppointmentsPageRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppointmentsPageRoutingModule", function() { return AppointmentsPageRoutingModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var _appointments_page__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./appointments.page */ "WFm2");




const routes = [
    {
        path: '',
        component: _appointments_page__WEBPACK_IMPORTED_MODULE_3__["AppointmentsPage"]
    },
    {
        path: 'agenda',
        loadChildren: () => __webpack_require__.e(/*! import() | agenda-agenda-module */ "agenda-agenda-module").then(__webpack_require__.bind(null, /*! ../agenda/agenda.module */ "ydXL")).then(m => m.AgendaPageModule)
    },
    {
        path: 'success',
        loadChildren: () => Promise.all(/*! import() | success-success-module */[__webpack_require__.e("default~appointments-appointments-module~bookmarks-bookmarks-module~centers-centers-module~contact-c~886963fb"), __webpack_require__.e("success-success-module")]).then(__webpack_require__.bind(null, /*! ./success/success.module */ "WiOt")).then(m => m.SuccessPageModule)
    },
    {
        path: 'videocall',
        loadChildren: () => __webpack_require__.e(/*! import() | videocalls-videocalls-module */ "default~pages-home-healthcare-videocalls-videocalls-module~videocalls-videocalls-module").then(__webpack_require__.bind(null, /*! ../videocalls/videocalls.module */ "bM2s")).then(m => m.VideocallsPageModule)
    },
];
let AppointmentsPageRoutingModule = class AppointmentsPageRoutingModule {
};
AppointmentsPageRoutingModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(routes)],
        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]],
    })
], AppointmentsPageRoutingModule);



/***/ }),

/***/ "WFm2":
/*!*************************************************************************!*\
  !*** ./src/app/pages/home/healthcare/appointments/appointments.page.ts ***!
  \*************************************************************************/
/*! exports provided: AppointmentsPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppointmentsPage", function() { return AppointmentsPage; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_appointments_page_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./appointments.page.html */ "e9Pd");
/* harmony import */ var _appointments_page_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./appointments.page.scss */ "KVmr");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ "ofXK");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var src_app_services_appointment_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/services/appointment.service */ "Oz3r");
/* harmony import */ var src_app_services_authentication_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/authentication.service */ "ej43");
/* harmony import */ var src_app_shared_classes_appointments__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/shared/classes/appointments */ "Cx2V");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var src_app_shared_classes_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/shared/classes/utils */ "hNG5");












let AppointmentsPage = class AppointmentsPage {
    constructor(router, appointmentService, authService, datepipe, alertController, location) {
        var _a, _b, _c, _d;
        this.router = router;
        this.appointmentService = appointmentService;
        this.authService = authService;
        this.datepipe = datepipe;
        this.alertController = alertController;
        this.location = location;
        this.backgroundImage = Object(src_app_shared_classes_utils__WEBPACK_IMPORTED_MODULE_10__["getRandomBackground"])();
        this.agendas = [];
        this.data_inici = new Date();
        this.data_fi = new Date();
        this.appointmentType = (_a = history.state) === null || _a === void 0 ? void 0 : _a.appointmentType;
        this.isOnline = (_b = history.state) === null || _b === void 0 ? void 0 : _b.isOnline;
        this.isAppointmentChange = (_c = history.state) === null || _c === void 0 ? void 0 : _c.isAppointmentChange;
        this.fromSymptonChecker = (_d = history.state) === null || _d === void 0 ? void 0 : _d.fromSymptonChecker;
        this.showProcessing = false;
        // Look for appointments between the next 2 hours and 2 months
        this.data_inici.setHours(this.data_inici.getHours() + 2);
        this.data_fi.setMonth(this.data_inici.getMonth() + 2);
    }
    ngOnInit() {
        this.setPageHeader();
        console.log('this.isAppointmentChange: ', this.isAppointmentChange);
        if (this.appointmentType == 6) // Teladoc
            this.getTeladocAgenda2();
        else {
            // MGC or Medico Tutor
            if (this.appointmentType == 7 && !this.appointmentService.metgeTutor)
                this.getMetgeTutor();
            else if (this.isAppointmentChange)
                this.editAgenda();
            else
                this.getAgenda();
        }
    }
    setPageHeader() {
        // Set headers and icons 
        switch (+this.appointmentType) {
            case 5:
                this.icon = '../../assets/icons/i_consulta_presencial.svg';
                this.header = 'appointments.face-to-face';
                this.infor = '../../assets/icons/interrogant.svg';
                break;
            case 6:
                console.log('this.appointmentType case 6: ', this.appointmentType, 'this is online:', this.isOnline);
                this.icon = '../../assets/icons/i_videoconsulta.svg';
                this.header = 'appointments.online';
                this.infor = '../../assets/icons/interrogant.svg';
                break;
            case 7:
                this.icon = this.isOnline ? '../../assets/icons/i_consulta_online.svg' : '../../assets/icons/i_consulta_presencial.svg';
                this.header = this.isOnline ? 'appointments.online' : 'appointments.face-to-face';
                this.infor = '../../assets/icons/interrogant.svg';
                break;
            default:
                console.log('this.appointmentType DEFAULT: ', this.appointmentType, 'this is online:', this.isOnline);
                this.icon = '../../assets/icons/i_consulta_presencial.svg';
                this.header = 'appointments.face-to-face';
                this.infor = '../../assets/icons/interrogant.svg';
        }
    }
    getTeladocAgenda2() {
        this.getTeladocUser2().then((res) => {
            // here you will have your `rs`
            console.log('ITeladocUser: ', res);
            this.teladocUser = res;
            let data_inici = this.datepipe.transform(this.data_inici, 'YYYY-MM-dd');
            let data_fi = this.datepipe.transform(this.data_fi, 'YYYY-MM-dd');
            console.log('this.teladocUser: ', this.teladocUser);
            const params = {
                date_from: data_inici,
                date_to: data_fi,
                project_id: this.teladocUser.project_id,
                time_zone: "Europe/Madrid",
                language: this.teladocUser.language
            };
            this.appointmentService.getTeladocAvailability(params).subscribe((data) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
                console.log("2 getTeladocAvailability: ", data.length);
                this.teladocSchedules = data;
                this.getNextTeladocAppointment();
            }), (error) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
                // Called when error
                this.location.back();
                throw error;
            }));
            this.getTeladocSchedule();
        }).catch(error => {
            this.location.back();
            throw error;
        });
    }
    // Function Definition (using async/await as demonstration)
    getTeladocUser2() {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            return yield this.appointmentService.getTeladocUser2();
        });
    }
    getTeladocAgenda() {
        this.appointmentService.getTeladocUser().subscribe((data) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            this.teladocUser = data;
            console.log("1 teladocUser: ", data);
        }), (error) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            console.log("ERROR: ", error);
            this.location.back();
            throw error;
        }));
    }
    getTeladocSchedule() {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
        });
    }
    editAgenda() {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            console.log("getAppointmentInfo for agenda: ", history.state.agenda);
            let agenda = history.state.agenda;
            this.appointmentService.getAppointmentInfo(this.authService.user.mutua, agenda.ext_id).subscribe((data) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
                yield data;
                console.log("1 getAppointmentInfo: ", data);
                this.appointmentService.id_agenda = data.id_agenda;
                this.appointmentService.codi_servei = data.codi_servei;
                this.appointmentService.getAgenda().subscribe((data) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
                    console.log('2 getAgenda: ', data);
                    // Wait for Provider's Agenda
                    this.agendas = data;
                    yield this.getAgendaSchedule();
                }));
            }), (error) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
                console.log("EDIT AGENDA ERROR: ", error);
                this.location.back();
                throw error;
            }));
        });
    }
    getAgenda() {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            this.appointmentService.getAgenda().subscribe((data) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
                // Wait for Provider's Agenda
                this.agendas = data;
                yield this.getAgendaSchedule();
            })),
                (error) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
                    // Called when error
                    this.location.back();
                    throw error;
                });
        });
    }
    getMetgeTutor() {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            this.appointmentService.get('mgc/metgetutor').subscribe((data) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
                yield data;
                console.log('mgc/metgetutor', yield data);
                // Validates metgetutor is assigned
                if (data.tutor && data.meta) {
                    this.appointmentService.codi_servei = data.meta.metge_codi_especialitat;
                    this.appointmentService.id_agenda = data.meta.metge_id_agenda;
                    this.appointmentService.tractament = data.meta.metge_tractament;
                    this.appointmentService.metgeTutor = data;
                }
                this.getAgenda();
                this.showProcessing = false;
            }), (error) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
                // Called when error
                this.location.back();
                throw error;
            }));
        });
    }
    getAppointmentInfo() {
        console.log("getAppointmentInfo: ", history.state.agenda);
        let agenda = history.state.agenda;
        return this.appointmentService.getAppointmentInfo(this.authService.user.mutua, agenda.ext_id).subscribe((data) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            yield data;
            console.log("isAppointmentChange response: ", data);
            this.appointmentService.id_agenda = data.id_agenda;
            this.appointmentService.codi_servei = data.codi_servei;
        }), (error) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            // Called when error
            this.location.back();
            throw error;
        }));
    }
    getAgendaSchedule() {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            let data_inici = this.datepipe.transform(this.data_inici, 'YYYYMMdd');
            let data_fi = this.datepipe.transform(this.data_fi, 'YYYYMMdd');
            const request = new src_app_shared_classes_appointments__WEBPACK_IMPORTED_MODULE_8__["AgendaAvailabilityRequest"](this.appointmentService.id_agenda, data_inici, data_fi);
            this.appointmentService.getAgendaAvailability(request).subscribe((data) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
                // Provider's availability for the next 2 months
                if (data.length < 1)
                    this.error = "Ho sentim, no hi ha cites disponibles";
                else {
                    this.schedules = data;
                    if (this.appointment === undefined)
                        this.getNextAvailableAppointment();
                }
            }), (error) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
                // Called when error
                this.location.back();
                throw error;
            }));
        });
    }
    changeDate() {
        //console.log("this.appointmentType", this.appointmentType);
        this.appointmentService.appointment = this.appointment;
        this.appointmentService.teladocUser = this.teladocUser;
        if (this.appointmentType == 6) {
            //console.log("teladocAppointment");
            this.appointmentService.teladocSchedules = this.teladocSchedules;
        }
        else {
            //console.log("mgc|metge-tutor appointment");
            this.appointmentService.schedules = this.schedules;
        }
        this.router.navigate(['/app/home/healthcare/appointments/agenda'], { state: { isOnline: this.isOnline, appointmentType: this.appointmentType, isAppointmentChange: this.isAppointmentChange, agenda: history.state.agenda, fromSymptonChecker: this.fromSymptonChecker } });
    }
    getNextAvailableAppointment() {
        console.log('3 getNextAvailableAppointment');
        var next_appointment;
        var endTime;
        // Iterate for each day
        this.schedules.every((element) => {
            // convert API date to format YYYY-MM-DD
            var pattern = /(\d{4})(\d{2})(\d{2})/;
            var current = new Date(element.data.replace(pattern, '$1-$2-$3'));
            // Iterate for each available hour
            element.horaris.every((item) => {
                // Check if it's available
                if (item.disponible) {
                    next_appointment = new Date(current);
                    // Time format response is "HHMM", so we extracts HH and MM
                    next_appointment.setHours(parseInt(item.hora.substring(0, 2)));
                    next_appointment.setMinutes(parseInt(item.hora.substring(2, 4)));
                    // Set end time 15 minutes after start time
                    endTime = new Date(next_appointment);
                    endTime.setMinutes(next_appointment.getMinutes() + 15);
                    // Add the time slot to calendar events array
                    this.appointment = next_appointment;
                    //console.log("FirstAvailableDate: ", this.appointment.toLocaleDateString('es-ES'), " <- getDate().toLocaleString() -> toLocaleTimeString:", this.appointment.toLocaleTimeString());
                    return false;
                }
            });
        });
    }
    getNextTeladocAppointment() {
        var next_appointment;
        var endTime;
        var flag = false;
        // Iterate for each day
        //console.log("this.teladocSchedules: ", this.teladocSchedules);
        for (let element of this.teladocSchedules) {
            // convert API date to format YYYY-MM-DD
            var pattern = /(\d{4})(\d{2})(\d{2})/;
            var current = new Date(element.date);
            // Iterate for each available hour
            //console.log('entry', element.date)
            for (let item of element.day_slots) {
                //console.log('entry', item.availability);
                if (item.availability) {
                    // Check if it's available
                    next_appointment = new Date(current);
                    // Time format response is "HHMM", so we extracts HH and MM
                    next_appointment.setHours(parseInt(item.time_ini.substring(0, 2)));
                    next_appointment.setMinutes(parseInt(item.time_ini.substring(3, 5)));
                    // Set end time 15 minutes after start time
                    endTime = new Date(next_appointment);
                    endTime.setMinutes(next_appointment.getMinutes() + 15);
                    // Add the time slot to calendar events array
                    this.appointment = next_appointment;
                    console.log("FirstAvailableDate: ", this.appointment.toLocaleDateString('es-ES'), " <- getDate().toLocaleString() -> toLocaleTimeString:", this.appointment.toLocaleTimeString());
                    //console.log("FOUND");
                    flag = true;
                    break;
                }
            }
            if (flag) {
                break;
            }
        }
    }
    makeAppointment() {
        var _a;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            this.appointmentService.appointment = this.appointment;
            // Teladoc appointmentType = 6
            if (this.appointmentType == 6) {
                this.appointmentService.teladocUser = this.teladocUser;
                this.router.navigate(['/app/home/healthcare/appointments/videocall'], { state: { isOnline: this.isOnline, appointmentType: this.appointmentType, isAppointmentChange: this.isAppointmentChange, agenda: history.state.agenda, fromSymptonChecker: this.fromSymptonChecker } });
            }
            else {
                this.showProcessing = true;
                let date = this.datepipe.transform(this.appointmentService.appointment, "yyyyMMdd");
                let time = this.datepipe.transform(this.appointmentService.appointment, "HHmm");
                // Iff appointment is with metge tutor (7), assign staff_id
                let staff_id = this.appointmentType == 7 ? (_a = this.appointmentService.metgeTutor) === null || _a === void 0 ? void 0 : _a.tutor.id : "";
                console.log(" this.appointmentType: ", this.appointmentType);
                console.log("staff_id: ", staff_id);
                // save apointment
                this.saveAppointment(date + time, staff_id);
            }
        });
    }
    saveAppointment(date, staff_id) {
        return this.appointmentService.bookAppointment(this.authService.mutua, date, this.isOnline, this.appointmentType, "", "", staff_id).subscribe((res) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            console.log("Appointment OK: ", res.dades);
            this.booking = res.dades;
            this.appointmentService.booking = res.dades;
            if (this.isAppointmentChange) {
                let previousAppointment = history.state.agenda;
                this.deletePreviousAppointment(previousAppointment);
            }
            else {
                this.router.navigate(['/app/home/healthcare/appointments/success'], { state: { isOnline: this.isOnline, appointmentType: this.appointmentType, isAppointmentChange: this.isAppointmentChange, agenda: history.state.agenda } });
            }
        }), (error) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            this.showProcessing = false;
            console.log("** ERROR saveAppointment", error);
        }), () => { });
    }
    deletePreviousAppointment(previousAppointment) {
        console.log("deletePreviousAppointment appointmentType: ", this.appointmentType);
        return this.appointmentService.deleteAppointment(this.authService.mutua, previousAppointment.ext_id, this.appointmentType, previousAppointment).subscribe((data) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            console.log("1 - deleted appointment MGC");
            this.deleteAppointmentDoole(previousAppointment.id);
        }), (error) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            // Called when error
            console.log("error:", yield error);
            this.location.back();
            throw error;
        }));
    }
    deleteAppointmentDoole(id) {
        return this.appointmentService.deleteAppointmentDoole(id).subscribe((data) => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            console.log("2 - deleted appointment doole ", data);
            this.router.navigate(['/app/home/healthcare/appointments/success'], { state: { isOnline: this.isOnline, appointmentType: this.appointmentType, isAppointmentChange: this.isAppointmentChange, agenda: history.state.agenda } });
            return data;
        }));
    }
};
AppointmentsPage.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"] },
    { type: src_app_services_appointment_service__WEBPACK_IMPORTED_MODULE_6__["AppointmentService"] },
    { type: src_app_services_authentication_service__WEBPACK_IMPORTED_MODULE_7__["AuthenticationService"] },
    { type: _angular_common__WEBPACK_IMPORTED_MODULE_3__["DatePipe"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_9__["AlertController"] },
    { type: _angular_common__WEBPACK_IMPORTED_MODULE_3__["Location"] }
];
AppointmentsPage = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"])({
        selector: 'app-appointments',
        template: _raw_loader_appointments_page_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        providers: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["DatePipe"]],
        styles: [_appointments_page_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], AppointmentsPage);



/***/ }),

/***/ "e9Pd":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/pages/home/healthcare/appointments/appointments.page.html ***!
  \*****************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<custom-header></custom-header>\n<ion-content class=\"back\" [ngStyle]=\"{'background': 'url(' + backgroundImage + ')'}\" fullscreen>\n  <page-header title=\"{{this.header | translate}}\" icon=\"{{this.icon}}\" info=\"{{ 'appointments.info' | translate}}\" >\n  </page-header>\n  <div class=\"main-container\">\n    <ng-container *ngIf=\"this.showProcessing else showSchedule\">\n      <div style=\"margin: 20px 40px; text-align: center;\">\n        <ion-spinner></ion-spinner>\n        <p>\n          <b>{{ 'appointments.save' | translate }}</b>\n        </p>\n      </div>\n    </ng-container>\n    <ng-template #showSchedule>\n      <ng-container *ngIf=\"!this.appointment && !this.error\">\n        <div style=\"margin: 20px 40px; text-align: center;\">\n          <ion-spinner></ion-spinner>\n          <p>\n            <b>{{ 'appointments.fetching' | translate }}</b>\n          </p>\n        </div>\n      </ng-container>\n    \n      <ng-container *ngIf=\"appointment && !error\">\n      \n        <p>{{ 'appointments.availability' | translate }}</p>\n      \n      <div *ngIf=\"appointmentType==6; else elseBlock\"> \n    \n          <ion-card>\n            <ion-card-content style=\"text-align: center;\">\n            <ion-card-title>{{ appointment.toLocaleDateString('es-ES',{ hour12: false }) + \",\" }} {{  appointment.toLocaleTimeString([], {hour12: false , hour: '2-digit', minute:'2-digit'}) + \" h\" }}</ion-card-title>\n            <ion-card-header>\n              <h3>{{'appointments.general-speciality'| translate }}</h3>\n            </ion-card-header>\n              \n          </ion-card-content>\n        </ion-card>\n      </div>\n      \n        <ng-template #elseBlock>\n          <ion-card *ngFor=\"let agenda of agendas\">\n          <ion-card-content style=\"text-align: center;\">\n            <ion-card-title> {{ appointment.toLocaleDateString('es-ES',{ hour12: false }) + \",\" }} {{  appointment.toLocaleTimeString([], { hour12: false, hour: '2-digit', minute:'2-digit'}) + \" h\" }}</ion-card-title>\n            <ion-card-header>\n           \n              <h3>{{'appointments.speciality'| translate }} {{ this.agenda.servei_nom}}</h3>\n              {{ this.agenda.centre_telefon }}\n            </ion-card-header>\n            </ion-card-content>\n          </ion-card>\n    \n        </ng-template>\n       \n        <ion-row style=\"margin-top: -4%; margin-left: 2%; margin-right: 2%;\">\n          <ion-col size=\"6\" style=\"text-align: left;\"><ion-button (click)=\"changeDate()\">{{ 'appointments.calendar' | translate | uppercase}}</ion-button></ion-col>\n          <ion-col size=\"6\" style=\"text-align: right;\"><ion-button (click)=\"makeAppointment()\">{{ 'appointments.book' | translate | uppercase}}</ion-button></ion-col>\n        </ion-row>\n       \n      </ng-container>\n    \n      <ng-container *ngIf=\"this.error\">\n      <div style=\"margin: 20px 40px; text-align: center;\">\n        <p>\n          <b>{{ this.error | translate }}</b>\n        </p>\n      </div>\n      </ng-container>\n    </ng-template>\n \n</div> \n</ion-content>\n");

/***/ }),

/***/ "qNzy":
/*!***************************************************************************!*\
  !*** ./src/app/pages/home/healthcare/appointments/appointments.module.ts ***!
  \***************************************************************************/
/*! exports provided: AppointmentsPageModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppointmentsPageModule", function() { return AppointmentsPageModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "ofXK");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _appointments_routing_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./appointments-routing.module */ "RAs3");
/* harmony import */ var _appointments_page__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./appointments.page */ "WFm2");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var src_app_components_components_module__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/components/components.module */ "j1ZV");









let AppointmentsPageModule = class AppointmentsPageModule {
};
AppointmentsPageModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
            _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["IonicModule"],
            _appointments_routing_module__WEBPACK_IMPORTED_MODULE_5__["AppointmentsPageRoutingModule"],
            _ngx_translate_core__WEBPACK_IMPORTED_MODULE_7__["TranslateModule"],
            src_app_components_components_module__WEBPACK_IMPORTED_MODULE_8__["ComponentsModule"]
        ],
        declarations: [_appointments_page__WEBPACK_IMPORTED_MODULE_6__["AppointmentsPage"]]
    })
], AppointmentsPageModule);



/***/ })

}]);
//# sourceMappingURL=appointments-appointments-module-es2015.js.map
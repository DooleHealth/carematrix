{"version":3,"sources":["webpack:///src/app/shared/classes/appointments.ts","webpack:///src/app/services/appointment.service.ts"],"names":["ApiResponse","AgendaResponse","AgendaRequest","id_agenda","codi_servei","AgendaAvailabilityRequest","data_inici","data_fi","Agenda","TimeSlot","AgendaAvailabilityResponse","AppointmentsRecordRequest","AppointmentsRecordResponse","BookAppointmentRequest","mutua","data_cita","enviar_mail","BookAppointmentResponse","AppointmentConfirmation","guardar_bbdd","dades","AppointmentDeleteConfirmation","AppointmentDetail","agenda_type","email","pacient_nom","pacient_cognom","id_cita","data","hora","estat","metge_nom","centre_nom","centre_adreca","centre_cp","centre_poblacio","centre_telefon","Appointment","TeladocUser","TeladocCredentialsResponse","TeladocTimeSlot","TeladocAvailability","AgendaAvailability","TeladocAvailabilityResponse","TeladocBookAppointmentRequest","TeladocCredentials","TeladocBookAppointmentResponse","TeladocStartVideocallResponse","AppointmentService","http","api","constants","authService","alertController","params","endpoint","getEndpoint","get_info_agenda","post","pipe","res","status","throwError","map","item","agenda","Object","assign","message","create","header","buttons","get_agenda_availability","username","user","id_usuari_mgc","app","get_teladoc_app_id","entorn","get_teladoc_env","console","log","teladocUser","toPromise","token","credentials","availability","date","id","project_id","teladocCredentials","client_token","get_appointments_record","appointment","isOnline","type","place","indications","staff_id","subscribe","error","appointmentId","appointmentType","send_mail","delete_appointment","info_appointment","make_appointment","saveAppointment","replace","time","postData","Error","endpt","getDooleEndpoint","get","items","providedIn"],"mappings":"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","file":"default~appointments-appointments-module~bookmarks-bookmarks-module~centers-centers-module~contact-c~886963fb-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\n\nexport class ApiResponse {\n    status: number;\n    message: string;\n    data: any;\n}\n\n@Injectable()\nexport class AgendaResponse {\n    status: number;\n    message: string;\n    data: Agenda[];\n}\n\nexport class AgendaRequest {\n\n    constructor(public id_agenda: string, public codi_servei: string) { };\n\n\n}\n\nexport class AgendaAvailabilityRequest {\n\n    constructor(public id_agenda: string, public data_inici: string, public data_fi: string) { };\n\n}\n\n@Injectable()\nexport class Agenda {\n    public id_agenda: string;\n    public centre_nom: string;\n    public metge_tracte: string;\n    public metge_nom: string;\n    public servei_codi: string;\n    public servei_nom: string;\n    public centre_adreca: string;\n    public centre_cp: string;\n    public centre_poblacio: string;\n    public centre_telefon: string;\n    constructor() { };\n}\n\nexport interface IAgenda {\n    agenda_type_id: number;\n    day: string;\n    description: string;\n    end_date: string;\n    end_time: string;\n    ext_id: string;\n    hide: boolean;\n    id: number;\n    month: string;\n    online: number;\n    origin: number;\n    site: string;\n    start_date: string;\n    start_date_iso8601: string;\n    start_time: string;\n    title: string;\n    year: string;\n}\n\n@Injectable()\nexport class TimeSlot {\n    public hora: string;\n    public disponible: boolean\n\n    constructor() { };\n\n}\n\n\n\n@Injectable()\nexport class AgendaAvailabilityResponse {\n    status: number;\n    message: string;\n    data: Array<AgendaAvailability>;\n}\n\n@Injectable()\nexport class AppointmentsRecordRequest {\n\n    public mutua: string;\n    public data_ini: string;\n    public data_fi: string;\n    public ordre: string;\n    constructor() { };\n}\n\n@Injectable()\nexport class AppointmentsRecordResponse {\n    public status: number;\n    public message: string;\n    public data: Array<Appointment>\n\n    constructor() { };\n}\n\n\nexport class BookAppointmentRequest {\n\n    constructor(public mutua: string, public data_cita: string, public id_agenda: string, public codi_servei, public enviar_mail: number) { };\n\n}\n\n@Injectable()\nexport class BookAppointmentResponse {\n\n    public status: number;\n    public message: string;\n    public data: AppointmentConfirmation;\n\n    constructor() { };\n\n};\n\nexport class AppointmentConfirmation {\n    constructor(public guardar_bbdd: boolean,\n        public enviar_mail: boolean,\n        public dades: AppointmentDetail) { };\n}\n\nexport class AppointmentDeleteConfirmation{\n    status: number;\n    message: string;\n    data: {\n        modificar_bbdd: boolean,\n        enviar_mail: boolean,\n        dades: {\n            email: string,\n            pacient_nom: string,\n            pacient_cognom: string,\n            id_cita: string,\n            data: string,\n            hora: string,\n            metge_nom: string,\n            centre_nom: string,\n            centre_adreca: string,\n            centre_cp: string,\n            centre_poblacio: string,\n            centre_telefon: string,\n        }\n    }\n}\n\nexport class AppointmentDetail {\n    constructor(\n        public agenda_type: string,\n        public email: string,\n        public pacient_nom: string,\n        public pacient_cognom: string,\n        public id_cita: number,\n        public data: string,\n        public hora: string,\n        public estat: string,\n        public metge_nom: string,\n        public centre_nom: string,\n        public centre_adreca: string,\n        public centre_cp: string,\n        public centre_poblacio: string,\n        public centre_telefon: string) { };\n\n}\n\n@Injectable()\nexport class Appointment {\n\n    public id_agenda: string;\n    public codi_servei: string;\n    public id_cita: number;\n    public data: string;\n    public hora: string;\n    public estat: string;\n    public metge_nom: string;\n    public servei_nom: string;\n    public centre_nom: string;\n    constructor() { };\n\n}\n\n\nexport interface ITeladocUser {\n    status: number;\n    message: string;\n    data: TeladocUser;\n}\nexport class TeladocUser {\n\n    public name: string;\n    public surname: string;\n    public surname2: string;\n    public gender: string;\n    public birth_date: string;\n    public language: string;\n    public email: string;\n    public password: string;\n    public phone_prefix: string;\n    public phone: string;\n    public time_zone: string;\n    public client_code: string;\n    public project_id: string;\n    public user_mgc: string;\n    public password_mgc: string;\n    public data_alta_user: number;\n    public cp: string;\n    public adreca: string;\n    public document_id: string;\n\n    constructor() { };\n}\n\nexport class TeladocCredentialsResponse {\n    status: string;\n    data: TeladocCredentials;\n    constructor() { };\n}\n@Injectable()\nexport class TeladocTimeSlot {\n    public time_ini: string;\n    public time_end: string;\n    public availability: boolean;\n    constructor() { };\n}\n\n@Injectable()\nexport class TeladocAvailability {\n\n    public date: string;\n    public day_slots: Array<TeladocTimeSlot>\n    constructor() { };\n}\n\n@Injectable()\nexport class AgendaAvailability {\n    public data: string;\n    public horaris: Array<TimeSlot>\n    constructor() { };\n\n}\n@Injectable()\nexport class TeladocAvailabilityResponse {\n    public status: string;\n    public data: {\n        availability: Array<TeladocAvailability>\n    }\n    constructor() { };\n}\n\n@Injectable()\nexport class TeladocBookAppointmentRequest {\n    public project_id: number;\n    public client_id: string;\n    public language: string;\n    public specialty: string;\n    public date: string;\n    public time: string;\n    public time_zone: string;\n    public country: string;\n    public doctor_location: string;\n    public patient: {\n        name: string;\n        surname: string;\n        surname2: string;\n        birth_date: string;\n        age: string;\n        phone_prefix: string;\n        phone: string;\n    }\n    public patient_files: [];\n    public title: string;\n    public call_reason: string;\n    public scheduled: boolean;\n    public doctor_answer: string;\n\n    constructor() { };\n}\n\n@Injectable()\nexport class TeladocCredentials {\n    public client_id: string;\n    public client_token: string;\n    public client_refresh_token: string;\n    public change_password: boolean;\n}\n\n@Injectable()\nexport class TeladocBookAppointmentResponse {\n    status: string;\n    data: {\n        id: number,\n        reference: string,\n        project_id: number,\n        client_id: string,\n        dependent_id: string,\n        doctor_id: string,\n        status: string,\n        language: string,\n        time_zone: string,\n        country: string,\n        doctor_location: string,\n        data_sharing: string,\n        patient: {\n            name: string,\n            surname: string,\n            surname2: string,\n            birth_date: string,\n            age: number,\n            phone_prefix: string,\n            phone: string,\n        },\n        title: string,\n        done_date: string,\n        doctor_answer: string,\n        patient_files: [],\n        doctor_files: [],\n        specialty: string,\n        on_demand: boolean,\n        scheduled: number,\n        date: string,\n        time: string,\n        call_reason: string,\n    }\n}\n\n@Injectable()\nexport class TeladocStartVideocallResponse {\n    status: string;\n    data: {\n        teladoc_jwt: string;\n        teladoc_id: number,\n        teladoc_auth_details: {\n            video_provider: string;\n            token: string;\n            session_id: string;\n            api_key: string;\n        },\n        teladoc_atendee_id: number;\n    }\n}","import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Constants } from '../config/constants';\nimport { Agenda, AgendaAvailability, AgendaAvailabilityRequest, AgendaAvailabilityResponse, AgendaRequest, AgendaResponse, Appointment, AppointmentConfirmation, AppointmentDetail, AppointmentsRecordRequest, AppointmentsRecordResponse, BookAppointmentRequest, BookAppointmentResponse, ITeladocUser, TeladocAvailabilityResponse, TeladocAvailability, TeladocBookAppointmentRequest, TeladocCredentialsResponse, TeladocCredentials, TeladocUser, TeladocBookAppointmentResponse, TeladocStartVideocallResponse, AppointmentDeleteConfirmation } from '../shared/classes/appointments';\nimport { ApiEndpointsService } from './api-endpoints.service';\nimport { HttpService } from './http.service';\nimport { AuthenticationService } from \"./authentication.service\";\nimport { AlertController } from '@ionic/angular';\n\n\n\nexport interface bookAppointment {\n  mutua: string;\n  date: string;\n}\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppointmentService {\n  agendas: Array<Agenda>;\n  schedules: Array<AgendaAvailability>\n  teladocSchedules : Array<TeladocAvailability>;\n  agenda: Agenda;\n  // DEV: \n  id_agenda: string;// = \"5dc98665-358b-403a-9e32-a5d81c3d7fb3\";\n  codi_servei: string;// = \"51FIST\";\n  appointment: Date;\n  booking: AppointmentDetail;\n  metgeTutor: any;\n  teladocUser: TeladocUser;\n  teladocCredentials: TeladocCredentials;\n  tractament: string;\n\n  constructor(private http: HttpService, private api: ApiEndpointsService, private constants: Constants,\n    private authService: AuthenticationService, public alertController: AlertController) {\n  }\n\n  getAgenda(): Observable<Agenda[]> {\n\n    const params = new AgendaRequest(this.id_agenda, this.codi_servei);\n    const endpoint = this.api.getEndpoint(this.constants.get_info_agenda);\n    \n    return this.http.post(endpoint, params).pipe(\n      map((res: AgendaResponse) => {\n        if (res.status != 200)\n          this.throwError(res);\n\n        return res.data.map(item => {\n          const agenda = new Agenda();\n          return Object.assign(agenda, item);\n        });\n\n      })\n    );\n  }\n\n  showAlert(message: string) {\n\n    return this.alertController.create({\n      header: 'Info',\n      message: message,\n      buttons: ['OK']\n    });\n\n  }\n\n  getAgendaAvailability(params: AgendaAvailabilityRequest): Observable<AgendaAvailability[]> {\n\n    //console.log(\"params: \", params);\n    const endpoint = this.api.getEndpoint(this.constants.get_agenda_availability);\n    return this.http.post(endpoint, params).pipe(\n      map((res: AgendaAvailabilityResponse) => {\n\n        if (res.status !== 200 && res.status !== 204)\n          this.throwError(res);\n\n        return res.data.map(item => {\n          const agenda = new AgendaAvailability();\n          return Object.assign(agenda, item);\n        });\n      })\n    );\n  }\n\n  getTeladocUser(): Observable<any> {\n\n    const endpoint = this.api.getEndpoint('getUserTeladoc');\n    const params = { username: this.authService.user.id_usuari_mgc, app: this.constants.get_teladoc_app_id, entorn: this.constants.get_teladoc_env };\n\n    return this.http.post(endpoint, params).pipe(\n      map(async (res: ITeladocUser) => {\n\n        console.log(\"getTeladocUser: \", res);\n        \n        if (res.status != 200)\n          return this.throwError(res.message);\n\n        this.teladocUser = res.data;\n        return res.data;\n\n      })\n    );\n  }\n\n  getTeladocUser2(): Promise<any> {\n\n    const endpoint = this.api.getEndpoint('getUserTeladoc');\n    const params = { username: this.authService.user.id_usuari_mgc, app: this.constants.get_teladoc_app_id, entorn: this.constants.get_teladoc_env };\n\n    return this.http.post(endpoint, params).pipe(\n      map((res : ITeladocUser ) => {\n        console.log(\"getTeladocUser: \", res);\n  \n        if (res.status != 200)\n          return this.throwError(res);\n\n        this.teladocUser = res.data;\n        return res.data;\n      })\n    ).toPromise();\n\n  }\n  getTeladocToken(params: Object): Observable<TeladocCredentials> {\n\n    var token: string;\n    const endpoint = this.api.getEndpoint('teladoc/users/login');\n\n    return this.http.post(endpoint, params).pipe(\n      map((res: TeladocCredentialsResponse) => {\n\n        //console.log('TeladocToken: ', res);\n        if (res.status != \"ok\")\n          this.throwError(\"Teladoc login failed\");\n\n        const credentials = new TeladocCredentials();\n        return Object.assign(credentials, res.data);\n        \n      })\n    )\n\n  }\n  getTeladocAvailability(params: Object): Observable<TeladocAvailability[]> {\n\n    //console.log(\"params: \", params);\n    const endpoint = this.api.getEndpoint('teladoc/telehealth/videocalls/availability');\n    return this.http.post(endpoint, params).pipe(\n      map((res: TeladocAvailabilityResponse) => {\n\n        if (res.status !== \"ok\")\n          this.throwError(res);\n\n        return res.data.availability.map(item => {\n          const date = new TeladocAvailability();\n          return Object.assign(date, item);\n        });\n      })\n    );\n  }\n\n  getTeladocAppointmentInfo(id:string, project_id:string): Observable<TeladocBookAppointmentResponse> {\n\n    const params = {\n      project_id: project_id,\n      token : this.teladocCredentials.client_token };\n    const endpoint = this.api.getEndpoint('teladoc/telehealth/videocalls/info/' + id );\n   \n    return this.http.post(endpoint, params).pipe(\n      map((res: TeladocBookAppointmentResponse) => {\n\n        if (res.status !== \"ok\")\n          this.throwError(res);\n\n        return res;\n      })\n    );\n  }\n\n  getAppointmentsRecord(params: AppointmentsRecordRequest): Observable<Appointment[]> {\n\n    //console.log(\"params: \", params);\n    const endpoint = this.api.getEndpoint(this.constants.get_appointments_record);\n    return this.http.post(endpoint, params).pipe(\n      map((res: AppointmentsRecordResponse) => {\n\n        if (res.status !== 200)\n          this.throwError(res);\n\n        return res.data.map(item => {\n          const appointment = new Appointment();\n          return Object.assign(appointment, item);\n        });\n      })\n    );\n  }\n\n  saveAppointment(data, isOnline, type, place, indications, staff_id){\n   \n    data[\"place\"] = place;\n    data[\"indications\"] =indications;\n    data[\"date\"] = data.data;\n    data[\"staff_id\"] = staff_id;\n    data[\"online\"] = isOnline;\n    data[\"agenda_type\"] = type;\n\n    \n    // Saves appointment in Doole\n    //console.log(\"saveAppointment data: \", data);\n  \n    this.authService.post('mgc/agenda', {data}).subscribe(\n    async (data) => { },\n    (error) => {\n      // Called when error\n      console.log('error: ', error);\n      throw new HttpErrorResponse(error);\n    });\n   \n  }\n\n\n  deleteAppointment(mutua, appointmentId, appointmentType, agenda){\n   \n    const params = {\n      \"mutua\": mutua,\n      \"id_cita\": appointmentId,\n      \"enviar_mail\": this.constants.send_mail\n    }\n\n    const endpoint = this.api.getEndpoint(this.constants.delete_appointment);\n\n    return this.http.post(endpoint, params).pipe(\n      map((res: AppointmentDeleteConfirmation) => {\n\n        console.log(\"RES: \", res);\n        if (res.status !== 200)\n          this.throwError(res);\n          \n        return res;\n        \n      })\n    );\n \n  }\n\n  getAppointmentInfo(mutua, id_cita){\n  \n    let params = {mutua, id_cita};\n    const endpoint = this.api.getEndpoint(this.constants.info_appointment);\n    return this.http.post(endpoint, params).pipe(\n      map((res) => {\n      \n        if (res.status !== 200)\n          this.throwError(res);\n          \n        return res.data;\n\n      })\n    );    \n  }\n\n  deleteAppointmentDoole(appointmentId){\n     //Delele appointment in Doole\n\n     const params = {agenda: appointmentId}\n     return this.authService.post('user/agenda/delete', params).pipe(\n      map((data) => {\n      \n        return data;\n       },\n      (error) => {\n        // Called when error\n        return error;\n      }));\n  }\n\n  \n  bookAppointment(mutua: string, date: string, isOnline:boolean = false, type:number,  place:string, indications:string, staff_id:string): Observable<AppointmentConfirmation> {\n    let params = new BookAppointmentRequest(mutua, date, this.id_agenda, this.codi_servei, this.constants.send_mail);\n    \n    //console.log(\"bookAppointment params:\", params);\n\n    const endpoint = this.api.getEndpoint(this.constants.make_appointment);\n    return this.http.post(endpoint, params).pipe(\n      map((res: BookAppointmentResponse) => {\n\n        if (res.status !== 200)\n          this.throwError(res);\n          \n        this.saveAppointment(res.data.dades, isOnline, type, place, indications, staff_id);\n        \n        return new AppointmentConfirmation(res.data.guardar_bbdd, res.data.enviar_mail, res.data.dades);\n\n      })\n    );\n  }\n\n  bookMetgeTutorAppointment(mutua: string, date: string, isOnline:boolean = false, type:string,  place:string, indications:string, staff_id:string): Observable<AppointmentConfirmation> {\n    let params = new BookAppointmentRequest(mutua, date, this.id_agenda, this.codi_servei, this.constants.send_mail);\n    //console.log(\"bookAppointment params:\", params);\n\n    const endpoint = this.api.getEndpoint(this.constants.make_appointment);\n    return this.http.post(endpoint, params).pipe(\n      map((res: BookAppointmentResponse) => {\n\n        if (res.status !== 200)\n          this.throwError(res);\n        \n        this.saveAppointment(res.data.dades, isOnline, type, place, indications, staff_id);\n         \n        return new AppointmentConfirmation(res.data.guardar_bbdd, res.data.enviar_mail, res.data.dades);\n\n      })\n    );\n  }\n\n  bookTeladocAppointment(params: TeladocBookAppointmentRequest, type:string,  place:string, indications:string, staff_id:string): Observable<any> {\n    \n    //console.log(\"teladocBookAppointment params:\", params);\n\n    const endpoint = this.api.getEndpoint('teladoc/telehealth/videocalls/create/' + this.teladocCredentials.client_token);\n    return this.http.post(endpoint, params).pipe(\n      map(async (res: TeladocBookAppointmentResponse) => {\n\n        if (res.status != 'ok')\n          this.throwError(\"Failed while creating videocall with Teladoc\");\n\n        let data = {\n            data: res.data.date.replace(/-/g, \"\"),\n            hora: res.data.time.replace(/:/g, \"\"),\n            id_cita:res.data.id,\n            metge_nom:\"Consulta online\",\n            centre_nom:\"\",\n            centre_adreca:\"\",\n            centre_cp:\"\",\n            centre_poblacio:\"\",\n            centre_telefon:\"\",    \n        };\n  \n        this.saveAppointment(data, true, type, place, indications, staff_id);\n        \n        return res.data;\n      })\n    );\n  }\n\n  getVideocallCredentials(params: Object){\n    //console.log(\"teladocBookAppointment params:\", params);\n\n    const endpoint = this.api.getEndpoint('teladoc/telehealth/videocalls/create/' + this.teladocCredentials.client_token);\n    return this.http.post(endpoint, params).pipe(\n      map((res: TeladocBookAppointmentResponse) => {\n\n        if (res.status != 'ok')\n          this.throwError(\"Failed while creating videocall with Teladoc\");\n\n        const data = res.data;\n        \n        const postData = {\n          data: {\n            data: data.date,\n            hora:data.time,\n            id_cita:data.id,\n            metge_nom:\"\",\n            centre_nom:\"\",\n            centre_adreca:\"\",\n            centre_cp:\"\",\n            centre_poblacio:\"\",\n            centre_telefon:\"\"\n          }\n        };\n  \n        // save apoointment in backoffice\n        this.authService.post('mgc/agenda', postData).subscribe(\n          async (data) => { },\n          (error) => {\n            // Called when error\n            console.log('error: ', error);\n            \n            throw new HttpErrorResponse(error);\n          });\n        \n        return res.data;\n      })\n    );\n  }\n\n  startTeladocVideocall(id:number, project_id:number){\n  \n    const params = {\n      id: id,\n      project_id: project_id\n    }\n    //console.log(\"teladocBookAppointment params:\", params);\n    const endpoint = this.api.getEndpoint('teladoc/telehealth/videocalls/start/' + this.teladocCredentials.client_token );\n    \n    return this.http.post(endpoint, params).pipe(\n      map((res: TeladocStartVideocallResponse) => {\n        //if (res.status != 'ok')\n          //this.throwError(\"Failed while creating videocall with Teladoc\");\n        \n        return res;\n      })\n    );\n  }\n\n  deleteAppointmentTeladoc(appointmentId, project_id) {\n\n    const params = {\n      id: appointmentId,\n      project_id: project_id\n    }\n    console.log('deleteAppointmentTeladoc params: ', params);\n    //console.log(\"teladocBookAppointment params:\", params);\n    const endpoint = this.api.getEndpoint('teladoc/telehealth/videocalls/cancel/' + this.teladocCredentials.client_token );\n    \n    return this.http.post(endpoint, params).pipe(\n      map((res: TeladocStartVideocallResponse) => {\n\n        console.log(\"deleteAppointmentTeladoc Response: \", res);\n\n        if (res.status != 'ok')\n          this.throwError(res.data);\n        \n        return res.data;\n      })\n    ); \n  }\n\n  throwError(error: any) {\n    \n    if (error instanceof HttpErrorResponse)\n       throw new HttpErrorResponse(error);\n    else\n       throw new Error(error);\n\n  }\n\n  get(endpt): Observable<any> {\n    const endpoint = this.api.getDooleEndpoint(endpt);\n    return this.http.get(endpoint).pipe(\n      map((res: any) => {\n        return res;\n      })\n    );\n  }\n\n  post(endpt, items): Observable<any> {\n    const endpoint = this.api.getDooleEndpoint(endpt);\n    return this.http.post(endpoint, items).pipe(\n      map((res: any) => {\n        return res;\n      })\n    );\n  }\n\n\n}\n"]}
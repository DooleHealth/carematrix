{"version":3,"sources":["webpack:///src/app/pages/home/wellbeing/diagnostictests/diagnostictests.page.scss","webpack:///src/app/pages/home/wellbeing/diagnostictests/diagnostictests-routing.module.ts","webpack:///src/app/pages/home/wellbeing/diagnostictests/diagnostictests.module.ts","webpack:///src/app/pages/home/wellbeing/diagnostictests/diagnostictests.page.html","webpack:///src/app/pages/home/wellbeing/diagnostictests/diagnostictests.page.ts"],"names":["routes","path","component","loadChildren","then","m","AddPageModule","DiagnosticdetailPageModule","DiagnostictestsPageRoutingModule","imports","forChild","exports","DiagnostictestsPageModule","declarations","DiagnostictestsPage","dooleService","router","storageService","datepipe","backgroundImage","showProcessing","dates","Array","isFirstTimeLoad","result","firstTime","getTypes","getTests","saveFirstTimeLoad","get","subscribe","data","types","diagnosticTestTypes","console","log","error","tests","diagnosticTests","forEach","element","push","id","parseInt","title","type_id","date","Date","show","transform","indexOf","event","showElement","e","search_type","search_date","getMonth","navigate","selector","template","providers"],"mappings":"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","file":"diagnostictests-diagnostictests-module-es5.js","sourcesContent":["export default \"ion-content {\\n  --background: none;\\n  background-position: center top;\\n  background-repeat: no-repeat !important;\\n  background-size: cover !important;\\n}\\n\\nion-card {\\n  border-bottom: 2pt solid #006488;\\n  border-radius: 0%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2RpYWdub3N0aWN0ZXN0cy5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUNBLCtCQUFBO0VBQ0EsdUNBQUE7RUFDQSxpQ0FBQTtBQUNGOztBQUVBO0VBQ0UsZ0NBQUE7RUFDQSxpQkFBQTtBQUNGIiwiZmlsZSI6ImRpYWdub3N0aWN0ZXN0cy5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tY29udGVudCB7XG4gIC0tYmFja2dyb3VuZDogbm9uZTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIHRvcDtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdCAhaW1wb3J0YW50O1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyICFpbXBvcnRhbnQ7XG59XG5cbmlvbi1jYXJke1xuICBib3JkZXItYm90dG9tOiAycHQgc29saWQgIzAwNjQ4ODtcbiAgYm9yZGVyLXJhZGl1czogMCU7XG59Il19 */\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DiagnostictestsPage } from './diagnostictests.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DiagnostictestsPage\n  },\n  {\n    path: 'add',\n    loadChildren: () => import('./add/add.module').then( m => m.AddPageModule)\n  },\n  {\n    path: 'edit',\n    loadChildren: () => import('./add/add.module').then( m => m.AddPageModule)\n  },\n  {\n    path: 'diagnosticdetail',\n    loadChildren: () => import('./diagnosticdetail/diagnosticdetail.module').then( m => m.DiagnosticdetailPageModule)\n  } ,\n\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DiagnostictestsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { DiagnostictestsPageRoutingModule } from './diagnostictests-routing.module';\n\nimport { DiagnostictestsPage } from './diagnostictests.page';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ComponentsModule } from 'src/app/components/components.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    DiagnostictestsPageRoutingModule,\n    TranslateModule,\n    ComponentsModule\n  ],\n  declarations: [DiagnostictestsPage]\n})\nexport class DiagnostictestsPageModule {}\n","export default \"<custom-header></custom-header>\\n<ion-content\\n  class=\\\"back\\\"\\n  [ngStyle]=\\\"{'background': 'url(' + backgroundImage + ')'}\\\"\\n  fullscreen\\n>\\n  <page-header\\n    title=\\\"{{'diagnostics.header' | translate}}\\\"\\n    icon=\\\"assets/icons/i_historia_clinica_digital.svg\\\"\\n    info=\\\"{{'diagnostics.info' | translate}}\\\"\\n  >\\n  </page-header>\\n  <div class=\\\"main-container\\\">\\n    <ion-text *ngIf=\\\"!firstTime\\\">{{'diagnostics.title' | translate}}</ion-text><br /><br />\\n\\n    <div *ngIf=\\\"firstTime\\\">\\n     \\n       \\n          <p>{{'diagnostics.text1' | translate}}<strong>{{'diagnostics.text2' | translate}}</strong>? </p>\\n    \\n          <p>{{'diagnostics.text3' | translate}}<strong>{{'diagnostics.text4' | translate}}</strong>\\n            {{'diagnostics.text5' | translate}}</p>\\n          <ion-img src=\\\"assets/images/ilustr_microscopi.svg\\\"></ion-img>\\n          <ion-button color=\\\"primary\\\" (click)=\\\"load()\\\" style=\\\"float: right;\\\">{{'commons.start' | translate}}</ion-button><br><br><br><br>\\n    \\n      \\n      \\n    </div>\\n    <!-- <ion-item *ngIf=\\\"!firstTime\\\">\\n      <ion-label>\\n        NOT First Time\\n      </ion-label>\\n    </ion-item> -->\\n\\n\\n<div *ngIf=\\\"!firstTime\\\" >\\n    <ng-container *ngIf=\\\"this.showProcessing ; else showTests\\\">\\n      <div style=\\\"margin: 20px 40px; text-align: center\\\">\\n        <ion-spinner></ion-spinner>\\n        <p>\\n          <b>{{ 'diagnostics.fetching' | translate }}</b>\\n        </p>\\n      </div>\\n    </ng-container>\\n\\n     \\n      <ng-template #showTests>\\n        <ng-container *ngIf=\\\"this.tests?.length == 0\\\">\\n          <ion-card lines=\\\"none\\\" class=\\\"no_agenda\\\">  \\n            <ion-avatar slot=\\\"start\\\">\\n            <ion-img src=\\\"assets/icons/i_diagnostic.svg\\\"></ion-img>\\n          </ion-avatar>\\n            <ion-card-content>\\n              {{ 'diagnostics.empty' | translate }}\\n            </ion-card-content>\\n          </ion-card>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"this.tests?.length > 0\\\">\\n        <ion-row>\\n          <ion-col style=\\\"background: #bbdce0\\\" size=\\\"6\\\">\\n            <ion-select\\n              placeholder=\\\"{{ 'diagnostics.type' | translate }}\\\"\\n              (ionChange)=\\\"filterTestsByType($event)\\\"\\n              [(ngModel)]=\\\"search_type\\\"\\n              interface=\\\"action-sheet\\\"\\n            >\\n              <ion-select-option value=\\\"all\\\"\\n                >{{ 'diagnostics.all_types' | translate }}</ion-select-option\\n              >\\n              <ion-select-option *ngFor=\\\"let t of types\\\" value=\\\"{{t.id}}\\\"\\n                >{{t.name}}</ion-select-option\\n              >\\n            </ion-select> </ion-col\\n          ><ion-col size=\\\"1\\\"></ion-col>\\n  \\n          <ion-col style=\\\"background: #bbdce0\\\" size=\\\"5\\\">\\n            <ion-select\\n              placeholder=\\\"{{'diagnostics.search_by_dates' | translate}}\\\"\\n              (ionChange)=\\\"filterTestsByDate($event)\\\"\\n              [(ngModel)]=\\\"search_date\\\"\\n              interface=\\\"action-sheet\\\"\\n            >\\n              <ion-select-option value=\\\"all\\\"\\n                >{{ 'diagnostics.all_dates' | translate }}</ion-select-option\\n              >\\n              <ion-select-option *ngFor=\\\"let date of dates\\\" [value]=\\\"date\\\"\\n                >{{date}}</ion-select-option\\n              >\\n            </ion-select>\\n          </ion-col> \\n        </ion-row>\\n          <br />\\n          <ion-list lines=\\\"full\\\">\\n            <ng-container *ngFor=\\\"let t of this.tests\\\">\\n              <ion-item\\n                *ngIf=\\\"t.show\\\"\\n                class=\\\"diagnostic-tests-card\\\"\\n                [routerLink]=\\\"['diagnosticdetail']\\\"\\n                [queryParams]=\\\"{ id: t.id }\\\"\\n              >\\n                <p>{{t.date | date:'dd/MM/YYYY'}}</p>\\n                <p style=\\\"color: #006488\\\">{{' - ' + t.title}}</p>\\n              </ion-item>\\n            </ng-container>\\n          </ion-list>\\n        </ng-container>\\n      </ng-template>\\n  </div>\\n</div>\\n</ion-content>\\n<div *ngIf=\\\"!firstTime\\\">\\n<ion-footer>\\n  <ion-toolbar style=\\\"--background: #d9e7ea;\\\" >\\n    <ion-button color=\\\"primary\\\" [routerLink]=\\\"['add']\\\" [state]=\\\"{action : 'add' }\\\" slot=\\\"end\\\">\\n      {{ 'diagnostics.add_text' | translate }}\\n    </ion-button>\\n  </ion-toolbar>\\n</ion-footer>\\n</div>\\n\";","import { Component, OnInit } from '@angular/core';\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {AuthenticationService} from \"../../../../services/authentication.service\";\nimport { Router } from '@angular/router';\nimport { DatePipe } from '@angular/common';\nimport { StorageService } from 'src/app/services/storage.service';\nimport { Storage } from '@ionic/storage';\nimport { getRandomBackground } from 'src/app/shared/classes/utils';\n\n@Component({\n  selector: 'app-diagnostictests',\n  templateUrl: './diagnostictests.page.html',\n  styleUrls: ['./diagnostictests.page.scss'],\n  providers:[DatePipe]\n  \n})\nexport class DiagnostictestsPage implements OnInit {\n  backgroundImage: string = getRandomBackground();\n  firstTime: boolean;\n  showProcessing: boolean  = true;\n  error:string;\n  tests: {id: number, title: string , type_id: number, date: Date, show: boolean }[];\n  types: any;\n  search_type:string;\n  search_date:string;\n  dates: Array<string> = new Array<string>();\n  constructor(private dooleService: AuthenticationService,\n              private router: Router,\n              private storageService: StorageService,\n              public datepipe: DatePipe) { }\n\n  ngOnInit() {\n    \n    this.storageService.isFirstTimeLoad().then(((result) =>\n    {\n      this.firstTime = result;\n    }));\n\n    //if first time update first time \n    if(this.firstTime){\n      // this.storageService.saveFirstTimeLoad();\n    }\n\n    this.getTypes();\n  \n  }\n\n  ionViewWillEnter(){\n    this.getTests();\n\n  }\n  \n  load(){\n    this.firstTime = false;\n    this.storageService.saveFirstTimeLoad(false);\n  }\n\n  getTypes(){\n    return this.dooleService.get('diagnosticTestTypes/available').subscribe(\n      async (data) => {\n       \n        this.types = data.diagnosticTestTypes;\n        console.log(\"this.types: \",  this.types);\n        \n      },\n      (error) => {\n        // Called when error\n        //loading.dismiss();\n        console.log(\"error: \", error);\n        throw new HttpErrorResponse(error);\n      },\n      () => {\n        // Called when operation is complete (both success and error)\n        //loading.dismiss();\n      });\n  }\n  \n  getTests(){\n\n    return this.dooleService.get('user/diagnosticTests').subscribe(\n      async (data) => {\n\n        await data;\n        this.showProcessing = false;\n        this.tests = [];\n        \n        data.diagnosticTests?.forEach(element => {\n        \n          this.tests.push({id: parseInt(element['id']), title: element['title'], type_id: parseInt(element['diagnostic_test_type_id']), date:new Date(element['data']), show:true})\n          let date = this.datepipe.transform(new Date(element['data']), 'MMMM YYYY');\n          \n          // To filter tests by date\n          if(this.dates.indexOf(date) === -1)\n            this.dates.push(date)\n  \n        });\n         \n        return data;\n      },\n      (error) => {\n        // Called when error\n        console.log(\"error: \", error);\n        throw new HttpErrorResponse(error);\n      },\n      () => {\n        // Called when operation is complete (both success and error)\n      });\n  }\n\n  filterTestsByDate(event: any){\n\n    this.tests.forEach(element => {      \n      element.show = this.showElement(element);\n    }); \n    \n  }\n\n  filterTestsByType(event: any){\n    this.tests.forEach(element => {\n      element.show = this.showElement(element);\n    });\n  }\n\n  showElement(e){\n    console.log(\"showElement\", e);\n    console.log(\"this.search_type: \", this.search_type  );\n    console.log(\"this.search_date: \", this.search_date  );\n    console.log(\" e.date.getMonth() == new Date(this.search_date).getMonth())\",  e.date.getMonth() , new Date(this.search_date));\n    return (!this.search_type || this.search_type == \"all\" || e.type_id == this.search_type) && \n          (!this.search_date || this.search_date == \"all\" || e.date.getMonth() == new Date(this.search_date).getMonth()) ? true : false;\n  };\n\n  addTest(){\n    this.router.navigate(['/add']);\n  }\n}\n"]}
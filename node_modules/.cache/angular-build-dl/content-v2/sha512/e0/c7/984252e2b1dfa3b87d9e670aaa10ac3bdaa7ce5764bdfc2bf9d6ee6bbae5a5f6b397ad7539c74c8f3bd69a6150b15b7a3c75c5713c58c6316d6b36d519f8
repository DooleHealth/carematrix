{"version":3,"sources":["webpack:///src/app/pages/landing/password/password.page.scss","webpack:///src/app/pages/landing/password/password.module.ts","webpack:///src/app/pages/landing/password/password.page.html","webpack:///src/app/pages/landing/password/password.page.ts"],"names":["routes","path","component","PasswordPageModule","imports","forChild","providers","declarations","PasswordPage","fb","authService","router","route","loadingController","firebaseService","location","ngZone","resource","nextRoute","authRedirectResult","getRedirectResult","subscribe","result","user","dismissLoading","uid","getUserUid","credentials","group","mutua","JSON","parse","window","localStorage","getItem","id_usuari_mgc","credencial","username","password","console","log","value","submit","error","manageAuthWithProvidersErrors","queryParams","params","authProvider","presentLoading","providerData","forEach","profile","providerId","setCredentials","setNextRoute","run","previousUrl","action","header","create","loading","present","validateCredentials","data","dismiss","navigate","required","authProviderCapitalized","toUpperCase","slice","message","then","loader","currentUrl","includes","redirectLoader","submitError","replaceState","getState","errorMessage","url","split","Error","resetSubmitError","prepareForAuthWithProvidersRedirection","setItem","stringify","length","signInWithGoogle","token","credential","accessToken","redirectLoggedUserToProfilePage","selector","template"],"mappings":"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","file":"pages-landing-password-password-module-es5.js","sourcesContent":["export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwYXNzd29yZC5wYWdlLnNjc3MifQ== */\";","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { PasswordPage } from './password.page';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { FirebaseAuthService } from '../../firebase/auth/firebase-auth.service';\nimport { ComponentsModule } from 'src/app/components/components.module';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PasswordPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    ReactiveFormsModule,\n    TranslateModule,\n    ComponentsModule\n  ],\n  providers: [FirebaseAuthService],\n  declarations: [PasswordPage]\n})\nexport class PasswordPageModule {}\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-icon class=\\\"icon_person\\\" src=\\\"assets/icons/usuari.svg\\\"></ion-icon>\\n      <!-- <ion-icon class=\\\"icon_person\\\" name=\\\"person-circle\\\"></ion-icon> -->\\n      <!---->\\n    </ion-buttons>\\n    <ion-buttons slot=\\\"primary\\\">\\n      <ion-back-button defaultHref=\\\"/email\\\"></ion-back-button> \\n    </ion-buttons>\\n  \\n    <ion-title >{{ this.header | translate }}</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n  <div class=\\\"landing-container\\\">\\n  <form (ngSubmit)=\\\"submit()\\\" [formGroup]=\\\"credentials\\\">\\n  <ion-text>\\n    <p>{{ 'password.text' | translate }}</p>\\n  </ion-text>\\n  <ion-text>\\n    <p>{{ 'password.text_2' | translate }} </p>\\n  </ion-text>\\n  <ion-text>\\n    <p>{{ 'password.text_3' | translate }} </p>\\n  </ion-text>\\n  <ion-item>\\n    <app-show-hide-password>\\n    <ion-input type=\\\"password\\\"  formControlName=\\\"password\\\" placeholder=\\\"{{ 'password.placeholder' | translate }}\\\" ></ion-input>\\n    </app-show-hide-password>\\n  </ion-item>\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col></ion-col>\\n      <ion-col></ion-col>\\n      <ion-col>\\n        <div>\\n          <ion-button type=\\\"submit\\\" color=\\\"primary\\\" slot=\\\"end\\\">\\n            {{ 'password.button' | translate | uppercase}}\\n            </ion-button>\\n        </div>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</form>\\n<!-- <ion-button expand=\\\"block\\\"  routerLink=\\\"/confirmation\\\" color=\\\"dark\\\">{{ 'password.button' | translate | uppercase }}</ion-button> -->\\n<div *ngIf=\\\"this.authService.action=='signUpUser'\\\">\\n  <ion-button class=\\\"button_cred\\\" type=\\\"button\\\" (click)=\\\"doGoogleLogin()\\\" expand=\\\"block\\\" color=\\\"light\\\">\\n    <ion-icon name=\\\"logo-google\\\" slot=\\\"start\\\"></ion-icon>\\n    {{ 'login.google_signin' | translate }}\\n  </ion-button>\\n  <!--\\n  <ion-button class=\\\"button_cred\\\" type=\\\"button\\\" expand=\\\"block\\\" color=\\\"light\\\">\\n    <ion-icon name=\\\"logo-apple\\\" slot=\\\"start\\\"></ion-icon>\\n    {{ 'login.apple_signin' | translate }}\\n  </ion-button>\\n  -->\\n</div>\\n\\n<!-- <ion-button type=\\\"button\\\" expand=\\\"block\\\"  routerLink=\\\"/\\\" color=\\\"dark\\\">\\n  <ion-icon name=\\\"logo-google\\\" slot=\\\"start\\\"></ion-icon>\\n  {{ 'password.google_signin' | translate }}\\n</ion-button>\\n<ion-button type=\\\"button\\\" expand=\\\"block\\\" routerLink=\\\"/home\\\" color=\\\"dark\\\">\\n  <ion-icon name=\\\"logo-apple\\\" slot=\\\"start\\\"></ion-icon>\\n  {{ 'password.apple_signin' | translate }}\\n</ion-button> -->\\n</div>\\n</ion-content>\\n\";","import { Component, NgZone, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthenticationService } from '../../../services/authentication.service';\nimport { LoadingController } from '@ionic/angular';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, Subscription } from 'rxjs';\nimport { Location } from '@angular/common';\nimport { RecoveryPassword } from 'src/app/shared/classes/credential-data';\nimport { FirebaseAuthService } from '../../firebase/auth/firebase-auth.service';\n\n@Component({\n  selector: 'app-password',\n  templateUrl: './password.page.html',\n  styleUrls: ['./password.page.scss'],\n})\nexport class PasswordPage implements OnInit, OnDestroy {\n\n  credentials: FormGroup;\n  header : string;\n  private resource : string = 'registre4';\n  private nextRoute : string = 'confirmation'\n  submitError: string;\n  redirectLoader: HTMLIonLoadingElement;\n  authRedirectResult: Subscription;\n  constructor(\n    private fb: FormBuilder,\n    public authService: AuthenticationService,\n    private router: Router,\n    public route: ActivatedRoute,\n    private loadingController: LoadingController,\n    public firebaseService: FirebaseAuthService,\n    public location: Location,\n    private ngZone: NgZone,\n  ) { \n\n     // Get firebase authentication redirect result invoken when using signInWithRedirect()\n    // signInWithRedirect() is only used when client is in web but not desktop\n    this.authRedirectResult = this.firebaseService.getRedirectResult()\n    .subscribe(result => {\n      if (result.user) {\n        this.dismissLoading();\n        var uid = this.getUserUid(result.user);\n        this.credentials = this.fb.group({\n          mutua: JSON.parse(window.localStorage.getItem('mutua')),\n          id_usuari_mgc: JSON.parse(window.localStorage.getItem('id_usuari_mgc')),\n          credencial: 'google', \n          username: uid,\n          password: ''\n        });\n       \n        console.log(\"before submit credentials; \", this.credentials.value);\n        this.submit();\n        \n      } else if (result.error) {\n        this.manageAuthWithProvidersErrors(result.error);\n      }\n    });\n\n    // Check if url contains our custom 'auth-redirect' param, then show a loader while we receive the getRedirectResult notification\n    this.route.queryParams.subscribe(params => {\n      const authProvider = params['auth-redirect'];\n      if (authProvider) {\n        this.presentLoading(authProvider);\n      }\n    });\n  }\n\n  public getUserUid(user) : string{\n   \n    var uid = '';\n    user.providerData.forEach(function (profile) {\n      switch(profile.providerId) {\n        case 'google.com':\n          uid = profile.uid;\n          break;\n        default:\n          uid = '';\n      }\n    });\n    console.log(\"  Uid: \" + uid);\n    return uid;\n  }\n  \n  ngOnInit() {\n    this.setCredentials();\n    // Based on user action, get next route and API resource\n    this.setNextRoute();\n    \n  }\n\n // Once the auth provider finished the authentication flow, and the auth redirect completes,\n  // hide the loader and redirect the user to the profile page\n  redirectLoggedUserToProfilePage(result?) {\n\n    \n    console.log(\"token:\" ,  result);\n\n    this.dismissLoading();\n    // As we are calling the Angular router navigation inside a subscribe method, the navigation will be triggered outside Angular zone.\n    // That's why we need to wrap the router navigation call inside an ngZone wrapper\n    this.ngZone.run(() => {\n      // Get previous URL from our custom History Helper\n      // If there's no previous page, then redirect to profile\n      // const previousUrl = this.historyHelper.previousUrl || 'firebase/auth/profile';\n      const previousUrl = 'app/home';\n\n      // No need to store in the navigation history the sign-in page with redirect params (it's justa a mandatory mid-step)\n      // Navigate to profile and replace current url with profile\n      //this.router.navigate([previousUrl], { replaceUrl: true });\n    });\n  }\n\n  public setNextRoute(){\n\n    switch(this.authService.action){\n      case 'signUpUser':\n        this.nextRoute = 'confirmation';\n        this.header = 'landing.registre';\n        break;\n      case 'passwordRecovery':\n        this.nextRoute = '/login';\n        this.resource = 'contrasenya3';\n        this.header = 'landing.password';\n        break;\n      case 'addSocialAuth':\n        this.nextRoute = 'app/home';\n        this.header = 'landing.social';\n        break;\n\n    }\n  }\n\n  async submit() {\n    const loading = await this.loadingController.create();\n    await loading.present();\n    \n    this.authService.validateCredentials(this.credentials.value, this.resource).subscribe(\n      async (data) => {\n        console.log(\"submitting response: \", data);\n        await loading.dismiss();\n        this.router.navigate([this.nextRoute]);\n      },\n      (error) => {\n        // Called when error\n        loading.dismiss();\n       throw error;\n        \n      },\n       () => {\n        // Called when operation is complete (both success and error)\n        loading.dismiss();\n      });\n      \n  }\n\n  setCredentials(){\n   \n   console.log('ngInitCredentials'); \n\n   this.credentials = this.fb.group({\n    mutua: this.authService.mutua,\n    id_usuari_mgc: this.authService.id_usuari_mgc,\n    credencial:'mgc',\n    username: this.authService.mutua,\n    password: ['', [Validators.required]]\n    });\n  }\n\n  async presentLoading(authProvider?: string) {\n    const authProviderCapitalized = authProvider[0].toUpperCase() + authProvider.slice(1);\n    this.loadingController.create({\n      message: authProvider ? 'Signing in with ' + authProviderCapitalized : 'Signin in ...'\n    }).then((loader) => {\n      const currentUrl = this.location.path();\n      if (currentUrl.includes('auth-redirect')) {\n       \n        this.redirectLoader = loader;\n        this.redirectLoader.present();\n      }\n    });\n  }\n\n  resetSubmitError() {\n    this.submitError = null;\n  }\n\n  // Before invoking auth provider redirect flow, present a loading indicator and add a flag to the path.\n  // The precense of the flag in the path indicates we should wait for the auth redirect to complete.\n  prepareForAuthWithProvidersRedirection(authProvider: string) {\n    this.presentLoading(authProvider);\n\n    this.location.replaceState(this.location.path(), 'auth-redirect=' + authProvider, this.location.getState());\n  }\n\n  manageAuthWithProvidersErrors(errorMessage: string) {\n    this.submitError = errorMessage;\n    // remove auth-redirect param from url\n    this.location.replaceState(this.router.url.split('?')[0], '');\n    this.dismissLoading();\n    throw new Error(errorMessage);\n  }\n\n  async dismissLoading() {\n    if (this.redirectLoader) {\n      await this.redirectLoader.dismiss();\n    }\n  }\n\n  \n  doGoogleLogin(): void {\n\n    this.resetSubmitError();\n    this.prepareForAuthWithProvidersRedirection('google');\n    window.localStorage.setItem('mutua', JSON.stringify(this.authService.mutua) );\n    window.localStorage.setItem('id_usuari_mgc', JSON.stringify(this.authService.id_usuari_mgc));\n    console.log(window.localStorage.length);\n    this.firebaseService.signInWithGoogle()\n    .subscribe((result) => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      var token = result.credential.accessToken;\n     \n      console.log(\"token: \", token);\n      this.redirectLoggedUserToProfilePage();\n    }, (error) => {\n        console.log(error);\n      this.manageAuthWithProvidersErrors(error.message);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.dismissLoading();\n  }\n}\n\n\n\n\n"]}
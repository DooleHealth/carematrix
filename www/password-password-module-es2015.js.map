{"version":3,"sources":["./src/app/pages/profile/settings/password/password.page.scss","./src/app/pages/profile/settings/password/password.page.ts","./src/app/pages/profile/settings/password/password.module.ts","./src/app/pages/profile/settings/password/password.page.html","./src/app/pages/profile/settings/password/password-routing.module.ts"],"names":[],"mappings":"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","file":"password-password-module-es2015.js","sourcesContent":["export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwYXNzd29yZC5wYWdlLnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AlertController } from '@ionic/angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { DooleService } from 'src/app/services/doole.service';\n\n@Component({\n  selector: 'app-password',\n  templateUrl: './password.page.html',\n  styleUrls: ['./password.page.scss'],\n})\nexport class PasswordPage implements OnInit {\n  isSubmittedNewPassword= false;\n  isSubmittedRepeatedPassword= false;\n  isSubmittedCurrentPassword= false;\n  formPassword: FormGroup;\n  constructor(\n    private dooleService: DooleService,\n    private formBuilder: FormBuilder,\n    private alertController: AlertController,\n    public router: Router,\n    private translate: TranslateService) { }\n\n  ngOnInit() {\n     this.formPassword = this.formBuilder.group({\n     newPassword: ['', [Validators.required, Validators.minLength(6)]],\n     confirmedPassword: ['', [Validators.required, Validators.minLength(6), this.checkPasswords.bind(this)]],\n      currentPassword: ['', [Validators.required, Validators.minLength(6)]],\n   })\n \n  }\n\n  private checkPasswords(group: FormControl) {\n    if(this.formPassword !== null && this.formPassword !== undefined) {\n      const pass = this.formPassword.get('newPassword').value;\n      const confirmPass = group.value;\n      //console.log(`[PasswordPage] checkPasswords(${pass}, ${confirmPass})`);\n      return pass === confirmPass ? null : {\n          NotEqual: true\n      };\n    }\n }\n\n  changePassword(){\n    this.isSubmittedPassword(true)\n    if(!this.formPassword.invalid){\n      this.presentAlertConfirm()\n      console.log(`[PasswordPage] changePassword(OK)`);\n    }\n\n  }\n\n  getErrorCurrentPassword() {\n    if (this.formPassword.get('currentPassword').hasError('required')) {\n      return this.translate.instant(\"setting.password.validators_required\");\n    }\n    if (this.formPassword.get('currentPassword').hasError('minlength')) {\n      return this.translate.instant(\"setting.password.validators_minlength\");\n    }\n    return '';\n  }\n\n  getErrorNewPassword(){\n    if (this.formPassword.get('newPassword').hasError('required')) {\n      return this.translate.instant(\"setting.password.validators_required\");\n    }\n    if (this.formPassword.get('newPassword').hasError('minlength')) {\n      return this.translate.instant(\"setting.password.validators_minlength\");\n    }\n    return '';\n  }\n\n  getErrorConfirmPassword() {\n    if (this.formPassword.get('confirmedPassword').hasError('required')) {\n      return this.translate.instant(\"setting.password.validators_required\");\n    }\n    if (this.formPassword.get('confirmedPassword').hasError('NotEqual')) {\n      return this.translate.instant(\"setting.password.validators_check_password\");\n    }\n    return '';\n  }\n\n  async presentAlertConfirm() {\n    const alert = await this.alertController.create({\n      cssClass: 'my-alert-class',\n      header: this.translate.instant(\"alert.header_confirmation\"),\n      message: this.translate.instant(\"setting.password.password_confirmation\"),\n      buttons: [\n        {\n          text: this.translate.instant(\"alert.button_cancel\"),\n          role: 'cancel',\n          cssClass: 'secondary',\n          handler: (blah) => {\n            console.log('Confirm Cancel: blah');\n          }\n        }, {\n          text: this.translate.instant(\"alert.button_ok\"),\n          handler: () => {\n            console.log('Confirm Okay');\n            this.postChangePassword();\n          }\n        }\n      ]\n    });\n\n    await alert.present();\n  }\n\n  async presentAlert(message) {\n    const alert = await this.alertController.create({\n      cssClass: 'my-alert-class',\n      message: message,\n      buttons: [{\n        text: this.translate.instant(\"alert.button_ok\"),\n        handler: () => {\n          console.log('Confirm Okay');\n          this.isSubmittedPassword(false)\n          this.router.navigateByUrl('/profile/settings');\n        }\n      }],\n      backdropDismiss: false\n    });\n\n    await alert.present();\n  }\n\n  postChangePassword(){\n    let params = {\n      oldPassword: this.formPassword.get('currentPassword').value,\n      newPassword: this.formPassword.get('newPassword').value,\n    }\n    this.dooleService.postAPIChangePassword(params).subscribe(\n      async (res: any) =>{\n       console.log('[InitialPage] postChangePassword()', await res);\n       if(res.success){\n          this.presentAlert(this.translate.instant(\"setting.password.success_changed_password\"))\n       }\n        else{\n          this.presentAlert(this.translate.instant(\"setting.password.no_success_changed_password\"))\n        }\n       },(err) => { \n          console.log('postChangePassword() ERROR(' + err.code + '): ' + err.message); \n          this.presentAlert(this.translate.instant(\"setting.password.error_changed_password\"))\n          throw err; \n      });\n  }\n\n  isSubmittedPassword(isSubmitted){\n    this.isSubmittedNewPassword= isSubmitted;\n    this.isSubmittedRepeatedPassword= isSubmitted;\n    this.isSubmittedCurrentPassword= isSubmitted;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { PasswordPageRoutingModule } from './password-routing.module';\n\nimport { PasswordPage } from './password.page';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    TranslateModule,\n    PasswordPageRoutingModule\n  ],\n  declarations: [PasswordPage]\n})\nexport class PasswordPageModule {}\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button icon=\\\"\\\" text=\\\"{{'alert.button_cancel' | translate }}\\\" ></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>{{'setting.password.title_change_password' | translate }}</ion-title>\\n    <ion-button slot=\\\"end\\\" fill=\\\"clear\\\" (click)=\\\"changePassword()\\\">OK\\n    </ion-button>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content fullscreen>\\n  <form [formGroup]=\\\"formPassword\\\" (ngSubmit)=\\\"changePassword()\\\">\\n    <ion-card class=\\\"cardProfile\\\">\\n          <ion-list>\\n            <ion-item lines=\\\"none\\\" >\\n              <ion-label>{{'setting.password.current-password' | translate }}</ion-label>\\n              <ion-input type=\\\"current-password\\\" (ionInput)=\\\"isSubmittedCurrentPassword = false\\\" formControlName=\\\"currentPassword\\\" class=\\\"textMedium\\\" placeholder=\\\"{{'setting.password.password' | translate }}\\\" minlength=\\\"6\\\" required></ion-input>\\n            </ion-item>\\n            <ion-label class=\\\"error ion-padding\\\" color=\\\"danger\\\" *ngIf=\\\"isSubmittedCurrentPassword && this.formPassword.get('currentPassword').invalid\\\">\\n                {{this.getErrorCurrentPassword()}}\\n              </ion-label>\\n          </ion-list>\\n    </ion-card>\\n    <ion-card class=\\\"cardProfile\\\">\\n      <ion-list>\\n        <ion-item>\\n          <ion-label >{{'setting.password.new-password' | translate }}</ion-label>\\n          <!-- <ion-label class=\\\"textMedium\\\">Contraseña</ion-label> -->\\n          <ion-input type=\\\"new-password\\\" (ionInput)=\\\"isSubmittedNewPassword = false\\\" formControlName=\\\"newPassword\\\" class=\\\"textMedium\\\" placeholder=\\\"{{'setting.password.password' | translate }}\\\" minlength=\\\"6\\\"  required></ion-input>\\n        </ion-item>\\n        <ion-label class=\\\"error ion-padding\\\" color=\\\"danger\\\" *ngIf=\\\"isSubmittedCurrentPassword && this.formPassword.get('newPassword').invalid\\\">\\n          {{this.getErrorNewPassword()}}\\n        </ion-label>\\n        <ion-item lines=\\\"none\\\">\\n          <ion-label>{{'setting.password.confirmedPassword' | translate }}</ion-label>\\n          <!-- <ion-label class=\\\"textMedium\\\">Contraseña</ion-label> -->\\n          <ion-input type=\\\"new-password\\\" (ionInput)=\\\"isSubmittedRepeatedPassword = false\\\" formControlName=\\\"confirmedPassword\\\" class=\\\"textMedium\\\" placeholder=\\\"{{'setting.password.password' | translate }}\\\" required=\\\"true\\\"></ion-input>\\n        </ion-item>\\n        <ion-label class=\\\"error ion-padding\\\" color=\\\"danger\\\" *ngIf=\\\"isSubmittedRepeatedPassword && this.formPassword.get('confirmedPassword').invalid\\\">\\n          {{this.getErrorConfirmPassword()}}\\n        </ion-label>\\n      </ion-list>\\n</ion-card>\\n</form>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PasswordPage } from './password.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PasswordPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PasswordPageRoutingModule {}\n"],"sourceRoot":"webpack:///"}
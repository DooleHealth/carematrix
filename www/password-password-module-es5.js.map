{"version":3,"sources":["webpack:///src/app/pages/profile/settings/password/password.page.scss","webpack:///src/app/pages/profile/settings/password/password.page.ts","webpack:///src/app/pages/profile/settings/password/password.module.ts","webpack:///src/app/pages/profile/settings/password/password.page.html","webpack:///src/app/pages/profile/settings/password/password-routing.module.ts"],"names":["PasswordPage","dooleService","formBuilder","alertController","router","translate","isSubmittedNewPassword","isSubmittedRepeatedPassword","isSubmittedCurrentPassword","formPassword","group","newPassword","required","minLength","confirmedPassword","checkPasswords","bind","currentPassword","undefined","pass","get","value","confirmPass","NotEqual","isSubmittedPassword","invalid","presentAlertConfirm","console","log","hasError","instant","create","cssClass","header","message","buttons","text","role","handler","blah","postChangePassword","alert","present","navigateByUrl","backdropDismiss","params","oldPassword","postAPIChangePassword","subscribe","res","success","presentAlert","err","code","isSubmitted","selector","template","PasswordPageModule","imports","declarations","routes","path","component","PasswordPageRoutingModule","forChild","exports"],"mappings":"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","file":"password-password-module-es5.js","sourcesContent":["export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwYXNzd29yZC5wYWdlLnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AlertController } from '@ionic/angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { DooleService } from 'src/app/services/doole.service';\n\n@Component({\n  selector: 'app-password',\n  templateUrl: './password.page.html',\n  styleUrls: ['./password.page.scss'],\n})\nexport class PasswordPage implements OnInit {\n  isSubmittedNewPassword= false;\n  isSubmittedRepeatedPassword= false;\n  isSubmittedCurrentPassword= false;\n  formPassword: FormGroup;\n  constructor(\n    private dooleService: DooleService,\n    private formBuilder: FormBuilder,\n    private alertController: AlertController,\n    public router: Router,\n    private translate: TranslateService) { }\n\n  ngOnInit() {\n     this.formPassword = this.formBuilder.group({\n     newPassword: ['', [Validators.required, Validators.minLength(4)]],\n     confirmedPassword: ['', [Validators.required, Validators.minLength(4), this.checkPasswords.bind(this)]],\n      currentPassword: ['', [Validators.required, Validators.minLength(4)]],\n   })\n \n  }\n\n  private checkPasswords(group: FormControl) {\n    if(this.formPassword !== null && this.formPassword !== undefined) {\n      const pass = this.formPassword.get('newPassword').value;\n      const confirmPass = group.value;\n      //console.log(`[PasswordPage] checkPasswords(${pass}, ${confirmPass})`);\n      return pass === confirmPass ? null : {\n          NotEqual: true\n      };\n    }\n }\n\n  changePassword(){\n    this.isSubmittedPassword(true)\n    if(!this.formPassword.invalid){\n      this.presentAlertConfirm()\n      console.log(`[PasswordPage] changePassword(OK)`);\n    }\n\n  }\n\n  getErrorCurrentPassword() {\n    if (this.formPassword.get('currentPassword').hasError('required')) {\n      return this.translate.instant(\"setting.password.validators_required\");\n    }\n    if (this.formPassword.get('currentPassword').hasError('minlength')) {\n      return this.translate.instant(\"setting.password.validators_minlength\");\n    }\n    return '';\n  }\n\n  getErrorNewPassword(){\n    if (this.formPassword.get('newPassword').hasError('required')) {\n      return this.translate.instant(\"setting.password.validators_required\");\n    }\n    if (this.formPassword.get('newPassword').hasError('minlength')) {\n      return this.translate.instant(\"setting.password.validators_minlength\");\n    }\n    return '';\n  }\n\n  getErrorConfirmPassword() {\n    if (this.formPassword.get('confirmedPassword').hasError('required')) {\n      return this.translate.instant(\"setting.password.validators_required\");\n    }\n    if (this.formPassword.get('confirmedPassword').hasError('NotEqual')) {\n      return this.translate.instant(\"setting.password.validators_check_password\");\n    }\n    return '';\n  }\n\n  async presentAlertConfirm() {\n    const alert = await this.alertController.create({\n      cssClass: 'my-alert-class',\n      header: this.translate.instant(\"alert.header_confirmation\"),\n      message: this.translate.instant(\"setting.password.password_confirmation\"),\n      buttons: [\n        {\n          text: this.translate.instant(\"alert.button_cancel\"),\n          role: 'cancel',\n          cssClass: 'secondary',\n          handler: (blah) => {\n            console.log('Confirm Cancel: blah');\n          }\n        }, {\n          text: this.translate.instant(\"alert.button_ok\"),\n          handler: () => {\n            console.log('Confirm Okay');\n            this.postChangePassword();\n          }\n        }\n      ]\n    });\n\n    await alert.present();\n  }\n\n  async presentAlert(message) {\n    const alert = await this.alertController.create({\n      cssClass: 'my-alert-class',\n      message: message,\n      buttons: [{\n        text: this.translate.instant(\"alert.button_ok\"),\n        handler: () => {\n          console.log('Confirm Okay');\n          this.isSubmittedPassword(false)\n          this.router.navigateByUrl('/profile/settings');\n        }\n      }],\n      backdropDismiss: false\n    });\n\n    await alert.present();\n  }\n\n  postChangePassword(){\n    let params = {\n      oldPassword: this.formPassword.get('currentPassword').value,\n      newPassword: this.formPassword.get('newPassword').value,\n    }\n    this.dooleService.postAPIChangePassword(params).subscribe(\n      async (res: any) =>{\n       console.log('[InitialPage] postChangePassword()', await res);\n       if(res.success){\n          this.presentAlert(this.translate.instant(\"setting.password.success_changed_password\"))\n       }\n        else{\n          this.presentAlert(this.translate.instant(\"setting.password.no_success_changed_password\"))\n        }\n       },(err) => { \n          console.log('postChangePassword() ERROR(' + err.code + '): ' + err.message); \n          this.presentAlert(this.translate.instant(\"setting.password.error_changed_password\"))\n          throw err; \n      });\n  }\n\n  isSubmittedPassword(isSubmitted){\n    this.isSubmittedNewPassword= isSubmitted;\n    this.isSubmittedRepeatedPassword= isSubmitted;\n    this.isSubmittedCurrentPassword= isSubmitted;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { PasswordPageRoutingModule } from './password-routing.module';\n\nimport { PasswordPage } from './password.page';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    TranslateModule,\n    PasswordPageRoutingModule\n  ],\n  declarations: [PasswordPage]\n})\nexport class PasswordPageModule {}\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button icon=\\\"\\\" text=\\\"{{'alert.button_cancel' | translate }}\\\" ></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>{{'setting.password.title_change_password' | translate }}</ion-title>\\n    <ion-button slot=\\\"end\\\" fill=\\\"clear\\\" (click)=\\\"changePassword()\\\">OK\\n    </ion-button>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content fullscreen>\\n  <form [formGroup]=\\\"formPassword\\\" (ngSubmit)=\\\"changePassword()\\\">\\n    <ion-card class=\\\"cardProfile\\\">\\n          <ion-list>\\n            <ion-item lines=\\\"none\\\" >\\n              <ion-label>{{'setting.password.current-password' | translate }}</ion-label>\\n              <ion-input type=\\\"current-password\\\" (ionInput)=\\\"isSubmittedCurrentPassword = false\\\" formControlName=\\\"currentPassword\\\" class=\\\"textMedium\\\" placeholder=\\\"{{'setting.password.password' | translate }}\\\" minlength=\\\"4\\\" required></ion-input>\\n            </ion-item>\\n            <ion-label class=\\\"error ion-padding\\\" color=\\\"danger\\\" *ngIf=\\\"isSubmittedCurrentPassword && this.formPassword.get('currentPassword').invalid\\\">\\n                {{this.getErrorCurrentPassword()}}\\n              </ion-label>\\n          </ion-list>\\n    </ion-card>\\n    <ion-card class=\\\"cardProfile\\\">\\n      <ion-list>\\n        <ion-item>\\n          <ion-label >{{'setting.password.new-password' | translate }}</ion-label>\\n          <!-- <ion-label class=\\\"textMedium\\\">Contraseña</ion-label> -->\\n          <ion-input type=\\\"new-password\\\" (ionInput)=\\\"isSubmittedNewPassword = false\\\" formControlName=\\\"newPassword\\\" class=\\\"textMedium\\\" placeholder=\\\"{{'setting.password.password' | translate }}\\\" minlength=\\\"4\\\"  required></ion-input>\\n        </ion-item>\\n        <ion-label class=\\\"error ion-padding\\\" color=\\\"danger\\\" *ngIf=\\\"isSubmittedCurrentPassword && this.formPassword.get('newPassword').invalid\\\">\\n          {{this.getErrorNewPassword()}}\\n        </ion-label>\\n        <ion-item lines=\\\"none\\\">\\n          <ion-label>{{'setting.password.confirmedPassword' | translate }}</ion-label>\\n          <!-- <ion-label class=\\\"textMedium\\\">Contraseña</ion-label> -->\\n          <ion-input type=\\\"new-password\\\" (ionInput)=\\\"isSubmittedRepeatedPassword = false\\\" formControlName=\\\"confirmedPassword\\\" class=\\\"textMedium\\\" placeholder=\\\"{{'setting.password.password' | translate }}\\\" required=\\\"true\\\"></ion-input>\\n        </ion-item>\\n        <ion-label class=\\\"error ion-padding\\\" color=\\\"danger\\\" *ngIf=\\\"isSubmittedRepeatedPassword && this.formPassword.get('confirmedPassword').invalid\\\">\\n          {{this.getErrorConfirmPassword()}}\\n        </ion-label>\\n      </ion-list>\\n</ion-card>\\n</form>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PasswordPage } from './password.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PasswordPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PasswordPageRoutingModule {}\n"]}